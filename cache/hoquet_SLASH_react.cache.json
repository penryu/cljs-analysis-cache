["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$hoquet.react","~:imports",null,"~:requires",["^ ","~$cstring","~$clojure.string","^:","^:"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$re-tag",["^ ","~:meta",["^ ","~:file","^6","~:line",5,"~:column",3,"~:end-line",5,"~:end-column",9,"~:doc","Regular expression that parses a CSS-style id and class from a tag name.","~:private",true],"^F",true,"^5","~$hoquet.react/re-tag","^@","hoquet/react.cljc","^D",9,"^B",1,"^A",4,"^C",5,"~:tag","~$any","^E","Regular expression that parses a CSS-style id and class from a tag name."],"~$as-str",["^ ","~:protocol-inline",null,"^?",["^ ","^@","^6","^A",7,"^B",7,"^C",7,"^D",13,"~:arglists",["~#list",["~$quote",["^M",[["~$x"]]]]]],"^5","~$hoquet.react/as-str","^@","hoquet/react.cljc","^D",13,"~:method-params",["^M",[["~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^M",[null,null]],"^B",1,"~:variadic?",false,"^A",7,"~:ret-tag","~$string","^C",7,"~:max-fixed-arity",1,"~:fn-var",true,"^L",["^M",["^N",["^M",[["~$x"]]]]]],"~$normalize-element",["^ ","^K",null,"^?",["^ ","^@","^6","^A",12,"^B",7,"^C",12,"^D",24,"^L",["^M",["^N",["^M",[[["~$tag","~$&","~$content"]]]]]],"^E","Ensure a tag vector is of the form [tag-name attrs content]."],"^5","~$hoquet.react/normalize-element","^@","hoquet/react.cljc","^D",24,"^P",["^M",[["~$p__22"]]],"^Q",null,"^R",["^M",[null,null]],"^B",1,"^S",false,"^A",12,"^T","~$cljs.core/IVector","^C",12,"^V",1,"^W",true,"^L",["^M",["^N",["^M",[[["^Y","~$&","^Z"]]]]]],"^E","Ensure a tag vector is of the form [tag-name attrs content]."],"~$*create-element*",["^ ","^?",["^ ","^@","^6","^A",28,"^B",3,"^C",28,"^D",19,"^E","The function that creates an element.\n          The function signature is: [component attributes & children]","~:dynamic",true],"^5","~$hoquet.react/*create-element*","^@","hoquet/react.cljc","^D",19,"^B",1,"^13",true,"^A",25,"^C",28,"^H","^I","^E","The function that creates an element.\n          The function signature is: [component attributes & children]"],"~$create-element",["^ ","^K",null,"^?",["^ ","^@","^6","^A",30,"^B",7,"^C",30,"^D",21,"^L",["^M",["^N",["^M",[["~$component"],["^16","~$attributes","~$&","~$children"]]]]],"~:top-fn",["^ ","^S",true,"~:fixed-arity",2,"^V",2,"^P",["^M",[["^16"]]],"^L",["^M",[["^16"],["^16","^17","~$&","^18"]]],"^R",["^M",[null,null]]]],"^5","~$hoquet.react/create-element","^@","hoquet/react.cljc","^D",21,"^19",["^ ","^S",true,"^1:",2,"^V",2,"^P",["^M",[["^16"]]],"^L",["^M",[["^16"],["^16","^17","~$&","^18"]]],"^R",["^M",[null,null]]],"^P",["^M",[["^16"]]],"^Q",null,"^1:",2,"^R",["^M",[null,null]],"^B",1,"^S",true,"~:methods",[["^ ","^1:",1,"^S",false,"^H","^I"],["^ ","^1:",2,"^S",true,"^H","^I"]],"^A",30,"^C",30,"^V",2,"^W",true,"^L",["^M",[["^16"],["^16","^17","~$&","^18"]]]],"~$render-react",["^ ","^K",null,"^?",["^ ","^@","^6","^A",43,"^B",7,"^C",43,"^D",19,"^L",["^M",["^N",["^M",[["~$x"]]]]],"^E","Turn a Clojure data type into a string of HTML.\n   In Hiccup, sequences are expanded out into the body. This is particularly useful for macros like `for`."],"^5","~$hoquet.react/render-react","^@","hoquet/react.cljc","^D",19,"^P",["^M",[["~$x"]]],"^Q",null,"^R",["^M",[null,null]],"^B",1,"^S",false,"^A",43,"^T",["^4",["^I","^U"]],"^C",43,"^V",1,"^W",true,"^L",["^M",["^N",["^M",[["~$x"]]]]],"^E","Turn a Clojure data type into a string of HTML.\n   In Hiccup, sequences are expanded out into the body. This is particularly useful for macros like `for`."],"~$render-element",["^ ","^K",null,"^?",["^ ","^@","^6","^A",37,"^B",7,"^C",37,"^D",21,"^L",["^M",["^N",["^M",[["~$element"]]]]],"^E","Render a tag vector as a HTML element."],"^5","~$hoquet.react/render-element","^@","hoquet/react.cljc","^D",21,"^P",["^M",[["^1@"]]],"^Q",null,"^R",["^M",[null,null]],"^B",1,"^S",false,"^A",37,"^T","^I","^C",37,"^V",1,"^W",true,"^L",["^M",["^N",["^M",[["^1@"]]]]],"^E","Render a tag vector as a HTML element."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ "],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:id","~:class","^15","~:else"]],"~:order",["^1F","^1G","^15","^1H"]],"^E",null]