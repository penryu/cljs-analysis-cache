["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","hoquet/runtime.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",19],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.core","~$cljs.core"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$hoquet.runtime","~:reader-aliases",["^ "],"~:imports",null,"~:requires",["^ ","~$clojure.string","^E","~$cstring","^E","^<","^<","~$goog","^G"],"~:seen",["^?",["~:require"]],"~:shadow/js-access-global",["^?",["Error"]],"~:uses",null,"~:defs",["^ ","~$xml-attribute",["^ ","~:protocol-inline",null,"^2",["^ ","^3","hoquet/runtime.cljc","^4",30,"^5",7,"^6",30,"^7",20,"~:arglists",["~#list",["~$quote",["^P",[["~$name","~$value"],["^R","^S","~$escape?"]]]]],"~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",3,"~:max-fixed-arity",3,"~:method-params",[["^R","^S"],["^R","^S","^T"]],"^O",["^P",[["^R","^S"],["^R","^S","^T"]]],"~:arglists-meta",["^P",[null,null]]]],"^@","~$hoquet.runtime/xml-attribute","^3","hoquet/runtime.cljc","^7",20,"^U",["^ ","^V",false,"^W",3,"^X",3,"^Y",[["^R","^S"],["^R","^S","^T"]],"^O",["^P",[["^R","^S"],["^R","^S","^T"]]],"^Z",["^P",[null,null]]],"^Y",[["^R","^S"],["^R","^S","^T"]],"~:protocol-impl",null,"^W",3,"^Z",["^P",[null,null]],"^5",1,"^V",false,"~:methods",[["^ ","^W",2,"^V",false,"~:tag","~$any"],["^ ","^W",3,"^V",false,"^12","~$string"]],"^4",30,"^6",30,"^X",3,"~:fn-var",true,"^O",["^P",[["^R","^S"],["^R","^S","^T"]]]],"~$re-tag",["^ ","^2",["^ ","^3","hoquet/runtime.cljc","^4",5,"^5",3,"^6",5,"^7",9,"~:doc","Regular expression that parses a CSS-style id and class from a tag name.","~:private",true],"^18",true,"^@","~$hoquet.runtime/re-tag","^3","hoquet/runtime.cljc","^7",9,"^5",1,"^4",4,"^6",5,"^12","^13","^17","Regular expression that parses a CSS-style id and class from a tag name."],"~$render-attribute",["^ ","^N",null,"^2",["^ ","^3","hoquet/runtime.cljc","^4",37,"^5",7,"^6",37,"^7",23,"^O",["^P",["^Q",["^P",[[["^R","^S"]]]]]]],"^@","~$hoquet.runtime/render-attribute","^3","hoquet/runtime.cljc","^7",23,"^Y",["^P",[["~$p__16009"]]],"^10",null,"^Z",["^P",[null,null]],"^5",1,"^V",false,"^4",37,"~:ret-tag",["^?",["^13","^14"]],"^6",37,"^X",1,"^15",true,"^O",["^P",["^Q",["^P",[[["^R","^S"]]]]]]],"~$normalize-element",["^ ","^N",null,"^2",["^ ","^3","hoquet/runtime.cljc","^4",51,"^5",7,"^6",51,"^7",24,"^O",["^P",["^Q",["^P",[[["~$tag","~$&","~$content"]]]]]],"^17","Ensure a tag vector is of the form [tag-name attrs content]."],"^@","~$hoquet.runtime/normalize-element","^3","hoquet/runtime.cljc","^7",24,"^Y",["^P",[["~$p__16015"]]],"^10",null,"^Z",["^P",[null,null]],"^5",1,"^V",false,"^4",51,"^1=","~$cljs.core/IVector","^6",51,"^X",1,"^15",true,"^O",["^P",["^Q",["^P",[[["^1?","~$&","^1@"]]]]]],"^17","Ensure a tag vector is of the form [tag-name attrs content]."],"~$container-tags",["^ ","^2",["^ ","^3","hoquet/runtime.cljc","^4",14,"^5",3,"^6",14,"^7",17,"^17","A list of tags that need an explicit ending tag when rendered."],"^@","~$hoquet.runtime/container-tags","^3","hoquet/runtime.cljc","^7",17,"^5",1,"^4",13,"^6",14,"^12","~$cljs.core/ISet","^17","A list of tags that need an explicit ending tag when rendered."],"~$render-attr-map",["^ ","^N",null,"^2",["^ ","^3","hoquet/runtime.cljc","^4",47,"^5",7,"^6",47,"^7",22,"^O",["^P",["^Q",["^P",[["~$attrs"]]]]]],"^@","~$hoquet.runtime/render-attr-map","^3","hoquet/runtime.cljc","^7",22,"^Y",["^P",[["^1H"]]],"^10",null,"^Z",["^P",[null,null]],"^5",1,"^V",false,"^4",47,"^1=","^13","^6",47,"^X",1,"^15",true,"^O",["^P",["^Q",["^P",[["^1H"]]]]]],"~$as-str",["^ ","^N",null,"^2",["^ ","^3","hoquet/runtime.cljc","^4",19,"^5",7,"^6",19,"^7",13,"^O",["^P",["^Q",["^P",[["~$x"]]]]]],"^@","~$hoquet.runtime/as-str","^3","hoquet/runtime.cljc","^7",13,"^Y",["^P",[["~$x"]]],"^10",null,"^Z",["^P",[null,null]],"^5",1,"^V",false,"^4",19,"^1=","^14","^6",19,"^X",1,"^15",true,"^O",["^P",["^Q",["^P",[["~$x"]]]]]],"~$render-element",["^ ","^N",null,"^2",["^ ","^3","hoquet/runtime.cljc","^4",66,"^5",7,"^6",66,"^7",21,"^O",["^P",["^Q",["^P",[["~$element"]]]]],"^17","Render a tag vector as a HTML element."],"^@","~$hoquet.runtime/render-element","^3","hoquet/runtime.cljc","^7",21,"^Y",["^P",[["^1M"]]],"^10",null,"^Z",["^P",[null,null]],"^5",1,"^V",false,"^4",66,"^1=","^14","^6",66,"^X",1,"^15",true,"^O",["^P",["^Q",["^P",[["^1M"]]]]],"^17","Render a tag vector as a HTML element."],"~$render-html",["^ ","^N",null,"^2",["^ ","^3","hoquet/runtime.cljc","^4",76,"^5",7,"^6",76,"^7",18,"^O",["^P",["^Q",["^P",[["~$x"]]]]],"^17","Turn a Clojure data type into a string of HTML.\n   In Hiccup, sequences are expanded out into the body. This is particularly useful for macros like `for`."],"^@","~$hoquet.runtime/render-html","^3","hoquet/runtime.cljc","^7",18,"^Y",["^P",[["~$x"]]],"^10",null,"^Z",["^P",[null,null]],"^5",1,"^V",false,"^4",76,"^1=",["^?",["^13","^14"]],"^6",76,"^X",1,"^15",true,"^O",["^P",["^Q",["^P",[["~$x"]]]]],"^17","Turn a Clojure data type into a string of HTML.\n   In Hiccup, sequences are expanded out into the body. This is particularly useful for macros like `for`."],"~$character-escapes",["^ ","^2",["^ ","^3","hoquet/runtime.cljc","^4",8,"^5",3,"^6",8,"^7",20,"^17","Characters to replace when escaping HTML","^18",true],"^18",true,"^@","~$hoquet.runtime/character-escapes","^3","hoquet/runtime.cljc","^7",20,"^5",1,"^4",7,"^6",8,"^12","~$cljs.core/IMap","^17","Characters to replace when escaping HTML"],"~$escape-html",["^ ","^N",null,"^2",["^ ","^3","hoquet/runtime.cljc","^4",24,"^5",7,"^6",24,"^7",18,"^O",["^P",["^Q",["^P",[["~$text"]]]]],"^17","Change special characters into HTML character entities."],"^@","~$hoquet.runtime/escape-html","^3","hoquet/runtime.cljc","^7",18,"^Y",["^P",[["^1U"]]],"^10",null,"^Z",["^P",[null,null]],"^5",1,"^V",false,"^4",24,"^1=","^14","^6",24,"^X",1,"^15",true,"^O",["^P",["^Q",["^P",[["^1U"]]]]],"^17","Change special characters into HTML character entities."]],"~:require-macros",["^ ","^<","^<"],"~:cljs.analyzer/constants",["^ ","^H",["^?",["~:else","~:id","~:class"]],"~:order",["^1Y","^1Z","^1["]],"~:flags",["^ ","^I",["^?",[]]],"~:js-deps",[],"~:deps",["^G","^<","^E"]]