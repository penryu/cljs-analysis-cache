["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","hoquet/runtime.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",19],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.core","~$cljs.core"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$hoquet.runtime","~:imports",null,"~:requires",["^ ","~$clojure.string","^D","~$cstring","^D","^<","^<","~$goog","^F"],"~:seen",["^?",["~:require"]],"~:shadow/js-access-global",["^?",["Error"]],"~:uses",null,"~:defs",["^ ","~$xml-attribute",["^ ","~:protocol-inline",null,"^2",["^ ","^3","hoquet/runtime.cljc","^4",30,"^5",7,"^6",30,"^7",20,"~:arglists",["~#list",["~$quote",["^O",[["~$name","~$value"],["^Q","^R","~$escape?"]]]]],"~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",3,"~:max-fixed-arity",3,"~:method-params",[["^Q","^R"],["^Q","^R","^S"]],"^N",["^O",[["^Q","^R"],["^Q","^R","^S"]]],"~:arglists-meta",["^O",[null,null]]]],"^@","~$hoquet.runtime/xml-attribute","^3","hoquet/runtime.cljc","^7",20,"^T",["^ ","^U",false,"^V",3,"^W",3,"^X",[["^Q","^R"],["^Q","^R","^S"]],"^N",["^O",[["^Q","^R"],["^Q","^R","^S"]]],"^Y",["^O",[null,null]]],"^X",[["^Q","^R"],["^Q","^R","^S"]],"~:protocol-impl",null,"^V",3,"^Y",["^O",[null,null]],"^5",1,"^U",false,"~:methods",[["^ ","^V",2,"^U",false,"~:tag","~$any"],["^ ","^V",3,"^U",false,"^11","~$string"]],"^4",30,"^6",30,"^W",3,"~:fn-var",true,"^N",["^O",[["^Q","^R"],["^Q","^R","^S"]]]],"~$re-tag",["^ ","^2",["^ ","^3","hoquet/runtime.cljc","^4",5,"^5",3,"^6",5,"^7",9,"~:doc","Regular expression that parses a CSS-style id and class from a tag name.","~:private",true],"^17",true,"^@","~$hoquet.runtime/re-tag","^3","hoquet/runtime.cljc","^7",9,"^5",1,"^4",4,"^6",5,"^11","^12","^16","Regular expression that parses a CSS-style id and class from a tag name."],"~$render-attribute",["^ ","^M",null,"^2",["^ ","^3","hoquet/runtime.cljc","^4",37,"^5",7,"^6",37,"^7",23,"^N",["^O",["^P",["^O",[[["^Q","^R"]]]]]]],"^@","~$hoquet.runtime/render-attribute","^3","hoquet/runtime.cljc","^7",23,"^X",["^O",[["~$p__15146"]]],"^[",null,"^Y",["^O",[null,null]],"^5",1,"^U",false,"^4",37,"~:ret-tag",["^?",["^12","^13"]],"^6",37,"^W",1,"^14",true,"^N",["^O",["^P",["^O",[[["^Q","^R"]]]]]]],"~$normalize-element",["^ ","^M",null,"^2",["^ ","^3","hoquet/runtime.cljc","^4",51,"^5",7,"^6",51,"^7",24,"^N",["^O",["^P",["^O",[[["~$tag","~$&","~$content"]]]]]],"^16","Ensure a tag vector is of the form [tag-name attrs content]."],"^@","~$hoquet.runtime/normalize-element","^3","hoquet/runtime.cljc","^7",24,"^X",["^O",[["~$p__15157"]]],"^[",null,"^Y",["^O",[null,null]],"^5",1,"^U",false,"^4",51,"^1<","~$cljs.core/IVector","^6",51,"^W",1,"^14",true,"^N",["^O",["^P",["^O",[[["^1>","~$&","^1?"]]]]]],"^16","Ensure a tag vector is of the form [tag-name attrs content]."],"~$container-tags",["^ ","^2",["^ ","^3","hoquet/runtime.cljc","^4",14,"^5",3,"^6",14,"^7",17,"^16","A list of tags that need an explicit ending tag when rendered."],"^@","~$hoquet.runtime/container-tags","^3","hoquet/runtime.cljc","^7",17,"^5",1,"^4",13,"^6",14,"^11","~$cljs.core/ISet","^16","A list of tags that need an explicit ending tag when rendered."],"~$render-attr-map",["^ ","^M",null,"^2",["^ ","^3","hoquet/runtime.cljc","^4",47,"^5",7,"^6",47,"^7",22,"^N",["^O",["^P",["^O",[["~$attrs"]]]]]],"^@","~$hoquet.runtime/render-attr-map","^3","hoquet/runtime.cljc","^7",22,"^X",["^O",[["^1G"]]],"^[",null,"^Y",["^O",[null,null]],"^5",1,"^U",false,"^4",47,"^1<","^12","^6",47,"^W",1,"^14",true,"^N",["^O",["^P",["^O",[["^1G"]]]]]],"~$as-str",["^ ","^M",null,"^2",["^ ","^3","hoquet/runtime.cljc","^4",19,"^5",7,"^6",19,"^7",13,"^N",["^O",["^P",["^O",[["~$x"]]]]]],"^@","~$hoquet.runtime/as-str","^3","hoquet/runtime.cljc","^7",13,"^X",["^O",[["~$x"]]],"^[",null,"^Y",["^O",[null,null]],"^5",1,"^U",false,"^4",19,"^1<","^13","^6",19,"^W",1,"^14",true,"^N",["^O",["^P",["^O",[["~$x"]]]]]],"~$render-element",["^ ","^M",null,"^2",["^ ","^3","hoquet/runtime.cljc","^4",66,"^5",7,"^6",66,"^7",21,"^N",["^O",["^P",["^O",[["~$element"]]]]],"^16","Render a tag vector as a HTML element."],"^@","~$hoquet.runtime/render-element","^3","hoquet/runtime.cljc","^7",21,"^X",["^O",[["^1L"]]],"^[",null,"^Y",["^O",[null,null]],"^5",1,"^U",false,"^4",66,"^1<","^13","^6",66,"^W",1,"^14",true,"^N",["^O",["^P",["^O",[["^1L"]]]]],"^16","Render a tag vector as a HTML element."],"~$render-html",["^ ","^M",null,"^2",["^ ","^3","hoquet/runtime.cljc","^4",76,"^5",7,"^6",76,"^7",18,"^N",["^O",["^P",["^O",[["~$x"]]]]],"^16","Turn a Clojure data type into a string of HTML.\n   In Hiccup, sequences are expanded out into the body. This is particularly useful for macros like `for`."],"^@","~$hoquet.runtime/render-html","^3","hoquet/runtime.cljc","^7",18,"^X",["^O",[["~$x"]]],"^[",null,"^Y",["^O",[null,null]],"^5",1,"^U",false,"^4",76,"^1<",["^?",["^12","^13"]],"^6",76,"^W",1,"^14",true,"^N",["^O",["^P",["^O",[["~$x"]]]]],"^16","Turn a Clojure data type into a string of HTML.\n   In Hiccup, sequences are expanded out into the body. This is particularly useful for macros like `for`."],"~$character-escapes",["^ ","^2",["^ ","^3","hoquet/runtime.cljc","^4",8,"^5",3,"^6",8,"^7",20,"^16","Characters to replace when escaping HTML","^17",true],"^17",true,"^@","~$hoquet.runtime/character-escapes","^3","hoquet/runtime.cljc","^7",20,"^5",1,"^4",7,"^6",8,"^11","~$cljs.core/IMap","^16","Characters to replace when escaping HTML"],"~$escape-html",["^ ","^M",null,"^2",["^ ","^3","hoquet/runtime.cljc","^4",24,"^5",7,"^6",24,"^7",18,"^N",["^O",["^P",["^O",[["~$text"]]]]],"^16","Change special characters into HTML character entities."],"^@","~$hoquet.runtime/escape-html","^3","hoquet/runtime.cljc","^7",18,"^X",["^O",[["^1T"]]],"^[",null,"^Y",["^O",[null,null]],"^5",1,"^U",false,"^4",24,"^1<","^13","^6",24,"^W",1,"^14",true,"^N",["^O",["^P",["^O",[["^1T"]]]]],"^16","Change special characters into HTML character entities."]],"~:require-macros",["^ ","^<","^<"],"~:cljs.analyzer/constants",["^ ","^G",["^?",["~:else","~:id","~:class"]],"~:order",["^1X","^1Y","^1Z"]],"~:flags",["^ ","^H",["^?",[]]],"~:js-deps",["^ "],"~:deps",["^F","^<","^D"]]