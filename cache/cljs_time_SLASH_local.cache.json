["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "],"~$Date",["^ ","~$prototype",["^ ","~$cljs-time$local$ILocalCoerce$",["^ "],"~$cljs-time$local$ILocalCoerce$to-local-date-time$arity$1",["^ "]]]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$cljs-time.local","~:imports",null,"~:requires",["^ ","~$time","~$cljs-time.core","^@","^@","~$coerce","~$cljs-time.coerce","^B","^B","~$fmt","~$cljs-time.format","^D","^D","~$goog.date.DateTime","^E"],"~:uses",null,"~:defs",["^ ","~$*local-formatters*",["^ ","~:meta",["^ ","~:file","^<","~:line",34,"~:column",3,"~:end-line",34,"~:end-column",21,"~:doc","Map of local formatters for parsing and printing.","~:dynamic",true],"^;","~$cljs-time.local/*local-formatters*","^J","cljs_time/local.cljs","^N",21,"^L",1,"^P",true,"^K",33,"^M",34,"~:tag","~$any","^O","Map of local formatters for parsing and printing."],"~$local-now",["^ ","~:protocol-inline",null,"^I",["^ ","^J","^<","^K",42,"^L",7,"^M",42,"^N",16,"~:arglists",["~#list",["~$quote",["^W",[[]]]]],"^O","Returns a DateTime for the current instant in the default time zone."],"^;","~$cljs-time.local/local-now","~:variadic",false,"^J","cljs_time/local.cljs","^N",16,"~:method-params",["^W",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^W",[null,null]],"^L",1,"^K",42,"^M",42,"~:max-fixed-arity",0,"~:fn-var",true,"^V",["^W",["^X",["^W",[[]]]]],"^O","Returns a DateTime for the current instant in the default time zone."],"~$ILocalCoerce",["^ ","^I",["^ ","~:protocol-symbol",true,"^J","^<","^N",26,"^L",14,"^K",47,"~:protocol-info",["^ ","~:methods",["^ ","~$to-local-date-time",[["~$obj"]]]],"^M",47,"^O",null,"~:jsdoc",["^W",["@interface"]]],"^15",true,"^;","~$cljs-time.local/ILocalCoerce","^J","cljs_time/local.cljs","^N",26,"^L",1,"^K",47,"^16",["^ ","^17",["^ ","^18",[["^19"]]]],"~:info",null,"^M",47,"^R","^S","~:impls",["^:",[null,"~$string","~$js/Date","~$goog/date.DateTime","~$number"]],"^O",null,"^1:",["^W",["@interface"]]],"^18",["^ ","^U",null,"^I",["^ ","^J","^<","^K",48,"^L",4,"^M",48,"^N",22,"~:protocol","^1;","^O","convert `obj` to a local goog.date\n                             DateTime instance retaining time fields.","^V",["^W",["^X",["^W",[["^19"]]]]]],"^1B","^1;","^;","~$cljs-time.local/to-local-date-time","^Z",false,"^J","cljs_time/local.cljs","^N",22,"^[",["^W",[["^19"]]],"^10",null,"^11",["^W",[null,null]],"^L",1,"^K",47,"^M",48,"^12",1,"^13",true,"^V",["^W",["^X",["^W",[["^19"]]]]],"^O","convert `obj` to a local goog.date\n                             DateTime instance retaining time fields."],"~$as-local-date-time-from-time-zone",["^ ","^U",null,"^I",["^ ","^J","^<","^K",51,"^L",8,"^M",51,"^N",41,"~:private",true,"^V",["^W",["^X",["^W",[["^19"]]]]],"^O","Coerce to date-time in the default time zone retaining time fields."],"^1E",true,"^;","~$cljs-time.local/as-local-date-time-from-time-zone","^Z",false,"^J","cljs_time/local.cljs","^N",41,"^[",["^W",[["^19"]]],"^10",null,"^11",["^W",[null,null]],"^L",1,"^K",51,"^M",51,"^12",1,"^13",true,"^V",["^W",["^X",["^W",[["^19"]]]]],"^O","Coerce to date-time in the default time zone retaining time fields."],"~$as-local-date-time-to-time-zone",["^ ","^U",null,"^I",["^ ","^J","^<","^K",56,"^L",8,"^M",56,"^N",39,"^1E",true,"^V",["^W",["^X",["^W",[["^19"]]]]],"^O","Coerce to date-time in the default time zone."],"^1E",true,"^;","~$cljs-time.local/as-local-date-time-to-time-zone","^Z",false,"^J","cljs_time/local.cljs","^N",39,"^[",["^W",[["^19"]]],"^10",null,"^11",["^W",[null,null]],"^L",1,"^K",56,"^M",56,"^12",1,"^13",true,"^V",["^W",["^X",["^W",[["^19"]]]]],"^O","Coerce to date-time in the default time zone."],"~$from-local-string",["^ ","^U",null,"^I",["^ ","^J","^<","^K",61,"^L",8,"^M",61,"^N",25,"^1E",true,"^V",["^W",["^X",["^W",[["~$s"]]]]],"^O","Return local DateTime instance from string using\n  formatters in *local-formatters*, returning first\n  which parses."],"^1E",true,"^;","~$cljs-time.local/from-local-string","^Z",false,"^J","cljs_time/local.cljs","^N",25,"^[",["^W",[["~$s"]]],"^10",null,"^11",["^W",[null,null]],"^L",1,"^K",61,"^M",61,"^12",1,"^13",true,"^V",["^W",["^X",["^W",[["~$s"]]]]],"^O","Return local DateTime instance from string using\n  formatters in *local-formatters*, returning first\n  which parses."],"~$format-local-time",["^ ","^U",null,"^I",["^ ","^J","^<","^K",92,"^L",7,"^M",92,"^N",24,"^V",["^W",["^X",["^W",[["^19","~$format-key"]]]]],"^O","Format obj as local time using the local formatter corresponding\n  to format-key."],"^;","~$cljs-time.local/format-local-time","^Z",false,"^J","cljs_time/local.cljs","^N",24,"^[",["^W",[["^19","^1L"]]],"^10",null,"^11",["^W",[null,null]],"^L",1,"^K",92,"^M",92,"^12",2,"^13",true,"^V",["^W",["^X",["^W",[["^19","^1L"]]]]],"^O","Format obj as local time using the local formatter corresponding\n  to format-key."]],"~:require-macros",["^ "],"~:cljs.analyzer/constants",["^ ","~:seen",["^:",["^19","^1J","^1;","^1I","^1E","~:else","^15","^1B","^14","~:ns","^;","^Y","^18","^J","^N","^H","~:type","^T","^1D","^1M","^L","^1G","^1F","~:parser","^17","^P","^K","^Q","^16","^1K","~$s","^<","^M","^1C","^1H","~:fmt/formatter","^V","^O","^1:","^1L","~:test"]],"~:order",["^1S","^1U","^1T","^Q","^1R","^;","^J","^N","^L","^P","^K","^M","^V","^O","^1V","^<","^H","^Y","^T","^1;","^15","^16","^1:","^14","^17","^18","^19","^1C","^1B","^1F","^1E","^1D","^1H","^1G","^1Q","^1J","^1I","~$s","^1M","^1K","^1L"]],"^O","Functions for working with local time without having to shift\n  to/from utc, the preferred time zone of `clj-time.core`.\n\n  Get the current local time with `(local-now)`.\n  `(to-local-date-time obj)` returns a local date-time instance\n  retaining the time fields.\n\n  The following all return `1986-10-14 04:03:27.246` with the\n  local time zone.\n\n```clojure\n(to-local-date-time (clj-time.core/date-time 1986 10 14 4 3 27 246))\n(to-local-date-time \"1986-10-14T04:03:27.246\")\n(to-local-date-time \"1986-10-14T04:03:27.246Z\")\n```\n\n  The dynamic var *local-formatters* contains a map of local formatters\n  for parsing and printing. It is initialized with all the formatters in\n  `clj-time.format` localized.\n\n  to-local-date-time for strings uses *local-formatters* to parse.\n  `(format-local-time (local-now) :basic-date-time)` formats an obj using\n  a formatter in `*local-formatters*` corresponding to the format-key\n  passed in.\n  "]