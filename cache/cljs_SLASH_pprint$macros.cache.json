["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","cljs/pprint$macros.cljc","~:line",9,"~:column",5,"~:end-line",9,"~:end-column",16],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.core","~$cljs.core"],"~:use-macros",null,"~:excludes",["~#set",["~$macroexpand","~$deftype"]],"~:name","~$cljs.pprint$macros","~:reader-aliases",["^ "],"~:imports",null,"~:requires",["^ ","~$clojure.walk","^G","~$walk","^G","~$cljs.analyzer","^I","~$ana","^I","^<","^<","~$goog","^K"],"~:seen",["^?",["~:require"]],"~:uses",null,"~:defs",["^ ","^@",["^ ","~:protocol-inline",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^4",83,"^5",10,"^6",83,"^7",21,"~:arglists",["~#list",["~$quote",["^R",[["~$env","~$form"]]]]]],"^B","~$cljs.pprint$macros/macroexpand","^3","cljs/pprint$macros.cljc","^7",21,"~:method-params",["^R",[["^T","^U"]]],"~:protocol-impl",null,"~:arglists-meta",["^R",[null,null]],"^5",4,"~:variadic?",false,"^4",83,"~:ret-tag","~$any","^6",83,"~:max-fixed-arity",2,"~:fn-var",true,"^Q",["^R",["^S",["^R",[["^T","^U"]]]]]],"~$parse-lb-options",["^ ","^P",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^4",51,"^5",8,"^6",51,"^7",24,"~:private",true,"^Q",["^R",["^S",["^R",[["~$opts","~$body"]]]]]],"^14",true,"^B","~$cljs.pprint$macros/parse-lb-options","^3","cljs/pprint$macros.cljc","^7",24,"^W",["^R",[["^15","^16"]]],"^X",null,"^Y",["^R",[null,null]],"^5",1,"^Z",false,"^4",51,"^[","~$cljs.core/IVector","^6",51,"^11",2,"^12",true,"^Q",["^R",["^S",["^R",[["^15","^16"]]]]]],"^A",["^ ","^P",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^4",40,"^5",11,"^6",40,"^7",18,"~:macro",true,"^Q",["^R",["^S",["^R",[["~$type-name","~$&","~$fields"]]]]],"~:top-fn",["^ ","^Z",true,"~:fixed-arity",1,"^11",1,"^W",["^R",[["^R",["^1:","^1;"]]]],"^Q",["^R",[["^1:","~$&","^1;"]]],"^Y",["^R",[null]]]],"^B","~$cljs.pprint$macros/deftype","^3","cljs/pprint$macros.cljc","^7",18,"^1<",["^ ","^Z",true,"^1=",1,"^11",1,"^W",["^R",[["^R",["^1:","^1;"]]]],"^Q",["^R",[["^1:","~$&","^1;"]]],"^Y",["^R",[null]]],"^W",["^R",[["^R",["^1:","^1;"]]]],"^X",null,"^1=",1,"^Y",["^R",[null]],"^5",1,"^Z",true,"~:methods",[["^ ","^1=",1,"^Z",true,"~:tag",["^?",["~$seq","~$cljs.core/IList"]]]],"^4",40,"^19",true,"^[","^10","^6",40,"^11",1,"^12",false,"^Q",["^R",[["^1:","~$&","^1;"]]]],"~$print-length-loop",["^ ","^P",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^7",28,"^1<",["^ ","^Z",true,"^1=",1,"^11",1,"^W",["^R",[["^R",["~$bindings","^16"]]]],"^Q",["^R",[["^1D","~$&","^16"]]],"^Y",["^R",[null]]],"^5",11,"^4",102,"^19",true,"^6",102,"^Q",["^R",["^S",["^R",[["^1D","~$&","^16"]]]]],"~:doc","A version of loop that iterates at most *print-length* times. This is designed\n  for use in pretty-printer dispatch functions."],"^B","~$cljs.pprint$macros/print-length-loop","^3","cljs/pprint$macros.cljc","^7",28,"^1<",["^ ","^Z",true,"^1=",1,"^11",1,"^W",["^R",[["^R",["^1D","^16"]]]],"^Q",["^R",[["^1D","~$&","^16"]]],"^Y",["^R",[null]]],"^W",["^R",[["^R",["^1D","^16"]]]],"^X",null,"^1=",1,"^Y",["^R",[null]],"^5",1,"^Z",true,"^1?",[["^ ","^1=",1,"^Z",true,"^1@",["^?",["^1A","^1B"]]]],"^4",102,"^19",true,"^[","^10","^6",102,"^11",1,"^12",false,"^Q",["^R",[["^1D","~$&","^16"]]],"^1E","A version of loop that iterates at most *print-length* times. This is designed\n  for use in pretty-printer dispatch functions."],"~$defdirectives",["^ ","^P",null,"^2",["^ ","^14",true,"^3","cljs/pprint$macros.cljc","^7",16,"^1<",["^ ","^Z",true,"^1=",0,"^11",0,"^W",["^R",[["^R",["~$directives"]]]],"^Q",["^R",[["~$&","^1H"]]],"^Y",["^R",[null]]],"^5",3,"^4",122,"^19",true,"^6",122,"^Q",["^R",["^S",["^R",[["~$&","^1H"]]]]]],"^14",true,"^B","~$cljs.pprint$macros/defdirectives","^3","cljs/pprint$macros.cljc","^7",16,"^1<",["^ ","^Z",true,"^1=",0,"^11",0,"^W",["^R",[["^R",["^1H"]]]],"^Q",["^R",[["~$&","^1H"]]],"^Y",["^R",[null]]],"^W",["^R",[["^R",["^1H"]]]],"^X",null,"^1=",0,"^Y",["^R",[null]],"^5",1,"^Z",true,"^1?",[["^ ","^1=",0,"^Z",true,"^1@",["^?",["^1A","^1B"]]]],"^4",121,"^19",true,"^[","^10","^6",122,"^11",0,"^12",false,"^Q",["^R",[["~$&","^1H"]]]],"~$pll-mod-body",["^ ","^P",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^4",90,"^5",8,"^6",90,"^7",20,"^14",true,"^Q",["^R",["^S",["^R",[["^T","~$var-sym","^16"]]]]]],"^14",true,"^B","~$cljs.pprint$macros/pll-mod-body","^3","cljs/pprint$macros.cljc","^7",20,"^W",["^R",[["^T","^1K","^16"]]],"^X",null,"^Y",["^R",[null,null]],"^5",1,"^Z",false,"^4",90,"^6",90,"^11",3,"^12",true,"^Q",["^R",["^S",["^R",[["^T","^1K","^16"]]]]]],"~$getf",["^ ","^P",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^4",28,"^5",11,"^6",28,"^7",15,"^19",true,"^Q",["^R",["^S",["^R",[["~$sym"]]]]],"^1E","Get the value of the field a named by the argument (which should be a keyword)."],"^B","~$cljs.pprint$macros/getf","^3","cljs/pprint$macros.cljc","^7",15,"^W",["^R",[["~$&form","~$&env","^1N"]]],"^X",null,"^Y",["^R",[null,null]],"^5",1,"^Z",false,"^4",28,"^19",true,"^[",["^?",["^1A","^1B"]],"^6",28,"^11",3,"^12",false,"^Q",["^R",["^S",["^R",[["^1N"]]]]],"^1E","Get the value of the field a named by the argument (which should be a keyword)."],"~$pprint-logical-block",["^ ","^P",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^7",31,"^1<",["^ ","^Z",true,"^1=",0,"^11",0,"^W",["^R",[["^R",["~$args"]]]],"^Q",["^R",[["~$&","^1S"]]],"^Y",["^R",[null]]],"^5",11,"^4",58,"^19",true,"^6",58,"^Q",["^R",["^S",["^R",[["~$&","^1S"]]]]],"^1E","Execute the body as a pretty printing logical block with output to *out* which\n  must be a pretty printing writer. When used from pprint or cl-format, this can be\n  assumed.\n\n  This function is intended for use when writing custom dispatch functions.\n\n  Before the body, the caller can optionally specify options: :prefix, :per-line-prefix\n  and :suffix."],"^B","~$cljs.pprint$macros/pprint-logical-block","^3","cljs/pprint$macros.cljc","^7",31,"^1<",["^ ","^Z",true,"^1=",0,"^11",0,"^W",["^R",[["^R",["^1S"]]]],"^Q",["^R",[["~$&","^1S"]]],"^Y",["^R",[null]]],"^W",["^R",[["^R",["^1S"]]]],"^X",null,"^1=",0,"^Y",["^R",[null]],"^5",1,"^Z",true,"^1?",[["^ ","^1=",0,"^Z",true,"^1@",["^?",["^1A","^1B"]]]],"^4",58,"^19",true,"^[","^10","^6",58,"^11",0,"^12",false,"^Q",["^R",[["~$&","^1S"]]],"^1E","Execute the body as a pretty printing logical block with output to *out* which\n  must be a pretty printing writer. When used from pprint or cl-format, this can be\n  assumed.\n\n  This function is intended for use when writing custom dispatch functions.\n\n  Before the body, the caller can optionally specify options: :prefix, :per-line-prefix\n  and :suffix."],"~$pp",["^ ","^P",null,"^2",["^ ","~:added","1.2","^3","cljs/pprint$macros.cljc","^7",13,"^5",11,"^4",163,"^19",true,"^6",163,"^Q",["^R",["^S",["^R",[[]]]]],"^1E","A convenience macro that pretty prints the last thing output. This is\nexactly equivalent to (pprint *1)."],"^1V","1.2","^B","~$cljs.pprint$macros/pp","^3","cljs/pprint$macros.cljc","^7",13,"^W",["^R",[["^1P","^1Q"]]],"^X",null,"^Y",["^R",[null,null]],"^5",1,"^Z",false,"^4",163,"^19",true,"^[",["^?",["^1A","^1B"]],"^6",163,"^11",2,"^12",false,"^Q",["^R",["^S",["^R",[[]]]]],"^1E","A convenience macro that pretty prints the last thing output. This is\nexactly equivalent to (pprint *1)."],"~$process-directive-table-element",["^ ","^P",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^4",113,"^5",8,"^6",113,"^7",39,"^14",true,"^Q",["^R",["^S",["^R",[[["~$char","~$params","~$flags","~$bracket-info","~$&","~$generator-fn"]]]]]]],"^14",true,"^B","~$cljs.pprint$macros/process-directive-table-element","^3","cljs/pprint$macros.cljc","^7",39,"^W",["^R",[["~$p__18616"]]],"^X",null,"^Y",["^R",[null,null]],"^5",1,"^Z",false,"^4",113,"^[","^18","^6",113,"^11",1,"^12",true,"^Q",["^R",["^S",["^R",[[["^1Y","^1Z","^1[","^20","~$&","^21"]]]]]]],"~$formatter-out",["^ ","^P",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^4",143,"^5",11,"^6",143,"^7",24,"^19",true,"^Q",["^R",["^S",["^R",[["~$format-in"]]]]],"^1E","Makes a function which can directly run format-in. The function is\nfn [& args] ... and returns nil. This version of the formatter macro is\ndesigned to be used with *out* set to an appropriate Writer. In particular,\nthis is meant to be used as part of a pretty printer dispatch method.\n\nformat-in can be either a control string or a previously compiled format."],"^B","~$cljs.pprint$macros/formatter-out","^3","cljs/pprint$macros.cljc","^7",24,"^W",["^R",[["^1P","^1Q","^25"]]],"^X",null,"^Y",["^R",[null,null]],"^5",1,"^Z",false,"^4",143,"^19",true,"^[",["^?",["^1A","^1B"]],"^6",143,"^11",3,"^12",false,"^Q",["^R",["^S",["^R",[["^25"]]]]],"^1E","Makes a function which can directly run format-in. The function is\nfn [& args] ... and returns nil. This version of the formatter macro is\ndesigned to be used with *out* set to an appropriate Writer. In particular,\nthis is meant to be used as part of a pretty printer dispatch method.\n\nformat-in can be either a control string or a previously compiled format."],"~$formatter",["^ ","^P",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^4",127,"^5",11,"^6",127,"^7",20,"^19",true,"^Q",["^R",["^S",["^R",[["^25"]]]]],"^1E","Makes a function which can directly run format-in. The function is\nfn [stream & args] ... and returns nil unless the stream is nil (meaning\noutput to a string) in which case it returns the resulting string.\n\nformat-in can be either a control string or a previously compiled format."],"^B","~$cljs.pprint$macros/formatter","^3","cljs/pprint$macros.cljc","^7",20,"^W",["^R",[["^1P","^1Q","^25"]]],"^X",null,"^Y",["^R",[null,null]],"^5",1,"^Z",false,"^4",127,"^19",true,"^[",["^?",["^1A","^1B"]],"^6",127,"^11",3,"^12",false,"^Q",["^R",["^S",["^R",[["^25"]]]]],"^1E","Makes a function which can directly run format-in. The function is\nfn [stream & args] ... and returns nil unless the stream is nil (meaning\noutput to a string) in which case it returns the resulting string.\n\nformat-in can be either a control string or a previously compiled format."],"~$with-pretty-writer",["^ ","^P",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^4",18,"^5",11,"^6",18,"^7",29,"^19",true,"^Q",["^R",["^S",["^R",[["~$base-writer","~$&","^16"]]]]],"^1<",["^ ","^Z",true,"^1=",1,"^11",1,"^W",["^R",[["^R",["^2:","^16"]]]],"^Q",["^R",[["^2:","~$&","^16"]]],"^Y",["^R",[null]]]],"^B","~$cljs.pprint$macros/with-pretty-writer","^3","cljs/pprint$macros.cljc","^7",29,"^1<",["^ ","^Z",true,"^1=",1,"^11",1,"^W",["^R",[["^R",["^2:","^16"]]]],"^Q",["^R",[["^2:","~$&","^16"]]],"^Y",["^R",[null]]],"^W",["^R",[["^R",["^2:","^16"]]]],"^X",null,"^1=",1,"^Y",["^R",[null]],"^5",1,"^Z",true,"^1?",[["^ ","^1=",1,"^Z",true,"^1@",["^?",["^1A","^1B"]]]],"^4",18,"^19",true,"^[","^10","^6",18,"^11",1,"^12",false,"^Q",["^R",[["^2:","~$&","^16"]]]],"~$setf",["^ ","^P",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^4",35,"^5",11,"^6",35,"^7",15,"^19",true,"^Q",["^R",["^S",["^R",[["^1N","~$new-val"]]]]],"^1E","Set the value of the field SYM to NEW-VAL"],"^B","~$cljs.pprint$macros/setf","^3","cljs/pprint$macros.cljc","^7",15,"^W",["^R",[["^1P","^1Q","^1N","^2="]]],"^X",null,"^Y",["^R",[null,null]],"^5",1,"^Z",false,"^4",35,"^19",true,"^[",["^?",["^1A","^1B"]],"^6",35,"^11",4,"^12",false,"^Q",["^R",["^S",["^R",[["^1N","^2="]]]]],"^1E","Set the value of the field SYM to NEW-VAL"],"~$with-pprint-dispatch",["^ ","^P",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^7",31,"^1<",["^ ","^Z",true,"^1=",1,"^11",1,"^W",["^R",[["^R",["~$function","^16"]]]],"^Q",["^R",[["^2@","~$&","^16"]]],"^Y",["^R",[null]]],"^5",11,"^4",157,"^19",true,"^6",157,"^Q",["^R",["^S",["^R",[["^2@","~$&","^16"]]]]],"^1E","Execute body with the pretty print dispatch function bound to function."],"^B","~$cljs.pprint$macros/with-pprint-dispatch","^3","cljs/pprint$macros.cljc","^7",31,"^1<",["^ ","^Z",true,"^1=",1,"^11",1,"^W",["^R",[["^R",["^2@","^16"]]]],"^Q",["^R",[["^2@","~$&","^16"]]],"^Y",["^R",[null]]],"^W",["^R",[["^R",["^2@","^16"]]]],"^X",null,"^1=",1,"^Y",["^R",[null]],"^5",1,"^Z",true,"^1?",[["^ ","^1=",1,"^Z",true,"^1@",["^?",["^1A","^1B"]]]],"^4",157,"^19",true,"^[","^10","^6",157,"^11",1,"^12",false,"^Q",["^R",[["^2@","~$&","^16"]]],"^1E","Execute body with the pretty print dispatch function bound to function."]],"~:require-macros",["^ ","^<","^<"],"~:cljs.analyzer/constants",["^ ","^L",["^?",["~$&","~$navigator__18646__auto__","~:suffix","~$cljs.core/<","~$cf__18644__auto__","~$-write","~$cljs.core/binding","~$cljs.pprint/*print-pprint-dispatch*","~$format-in__18643__auto__","~$cljs.core/=","~$my-i-n__18632__auto__","~$type-tag","~$cljs.core/array-map","~$cljs.pprint/pretty-writer?","~$cljs.core/deref","~$cljs.core/hash-map","~$loop*","~:generator-fn","~$cljs.pprint/*current-level*","~$cljs.core/string?","~$cljs.core/*1","~$my-c-c__18630__auto__","~$cljs.pprint/*print-miser-width*","~$stream__18634__auto__","~$cljs.pprint/execute-format","~$cljs.core/defn-","~:params","~$fn","~$cljs.core/*out*","~$cljs.pprint/make-pretty-writer","~$do","~$base-writer__18478__auto__","~$this","~$offset","~$if","~:prefix","~$cljs.pprint/-ppflush","~$cljs.core/swap!","~$cljs.core/let","~$x__18523__auto__","~$cf__18633__auto__","~$cljs.pprint/*print-right-margin*","~$cljs.core/*print-length*","^1Z","~$cljs.core/defrecord","~$directive-table","~$my-e-f__18631__auto__","~$cljs.core/loop","~$cljs.pprint/init-navigator","~$recur","~$args__18645__auto__","~:per-line-prefix","~$cljs.core/fn","~$new-writer__18479__auto__","~$cljs.pprint/start-block","~$cljs.pprint/end-block","~$args__18635__auto__","~$cljs.core/not","~$cljs.core/assoc","~$cljs.pprint/level-exceeded","~:bracket-info","~$cljs.pprint/pprint","~$navigator__18636__auto__","~:flags","~:directive","~:type-tag","~$cljs.pprint/cached-compile","~$cljs.core/or","~$format-in__18629__auto__","~$cljs.core/inc","~$def","~$cljs.pprint/*current-length*"]],"~:order",["^3=","^36","^3K","^3O","^2P","^2I","^33","^39","^34","^3@","^2Y","^3;","^2Q","^37","^3<","^3P","^35","^3B","^2N","^30","^3>","^2L","^3W","^2E","^3:","^3I","^3Q","^2H","^2U","^3[","^41","^3L","^3M","^2S","^3G","^3E","^3Y","^3A","^2F","^3V","^31","^3U","^3R","^2T","^2O","^32","^1Z","^38","^40","^3C","^2R","^3Z","^2X","^3X","^3D","^2[","^2M","^3F","^3?","^2V","^3J","^2Z","~$&","^3N","^3T","^2K","^2G","^3H","^2D","^2J","^3S","^2W"]],"^3U",["^ ","^M",["^?",[]]],"~:js-deps",[],"~:deps",["^K","^<","^G","^I"]]