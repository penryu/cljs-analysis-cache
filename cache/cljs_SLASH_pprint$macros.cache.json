["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","cljs/pprint$macros.cljc","~:line",9,"~:column",5,"~:end-line",9,"~:end-column",16],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.core","~$cljs.core"],"~:use-macros",null,"~:excludes",["~#set",["~$macroexpand","~$deftype"]],"~:name","~$cljs.pprint$macros","~:imports",null,"~:requires",["^ ","~$clojure.walk","^F","~$walk","^F","~$cljs.analyzer","^H","~$ana","^H","^<","^<","~$goog","^J"],"~:seen",["^?",["~:require"]],"~:uses",null,"~:defs",["^ ","^@",["^ ","~:protocol-inline",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^4",83,"^5",10,"^6",83,"^7",21,"~:arglists",["~#list",["~$quote",["^Q",[["~$env","~$form"]]]]]],"^B","~$cljs.pprint$macros/macroexpand","^3","cljs/pprint$macros.cljc","^7",21,"~:method-params",["^Q",[["^S","^T"]]],"~:protocol-impl",null,"~:arglists-meta",["^Q",[null,null]],"^5",4,"~:variadic?",false,"^4",83,"~:ret-tag","~$any","^6",83,"~:max-fixed-arity",2,"~:fn-var",true,"^P",["^Q",["^R",["^Q",[["^S","^T"]]]]]],"~$parse-lb-options",["^ ","^O",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^4",51,"^5",8,"^6",51,"^7",24,"~:private",true,"^P",["^Q",["^R",["^Q",[["~$opts","~$body"]]]]]],"^13",true,"^B","~$cljs.pprint$macros/parse-lb-options","^3","cljs/pprint$macros.cljc","^7",24,"^V",["^Q",[["^14","^15"]]],"^W",null,"^X",["^Q",[null,null]],"^5",1,"^Y",false,"^4",51,"^Z","~$cljs.core/IVector","^6",51,"^10",2,"^11",true,"^P",["^Q",["^R",["^Q",[["^14","^15"]]]]]],"^A",["^ ","^O",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^4",40,"^5",11,"^6",40,"^7",18,"~:macro",true,"^P",["^Q",["^R",["^Q",[["~$type-name","~$&","~$fields"]]]]],"~:top-fn",["^ ","^Y",true,"~:fixed-arity",1,"^10",1,"^V",["^Q",[["^Q",["^19","^1:"]]]],"^P",["^Q",[["^19","~$&","^1:"]]],"^X",["^Q",[null]]]],"^B","~$cljs.pprint$macros/deftype","^3","cljs/pprint$macros.cljc","^7",18,"^1;",["^ ","^Y",true,"^1<",1,"^10",1,"^V",["^Q",[["^Q",["^19","^1:"]]]],"^P",["^Q",[["^19","~$&","^1:"]]],"^X",["^Q",[null]]],"^V",["^Q",[["^Q",["^19","^1:"]]]],"^W",null,"^1<",1,"^X",["^Q",[null]],"^5",1,"^Y",true,"~:methods",[["^ ","^1<",1,"^Y",true,"~:tag",["^?",["~$seq","~$cljs.core/IList"]]]],"^4",40,"^18",true,"^Z","^[","^6",40,"^10",1,"^11",false,"^P",["^Q",[["^19","~$&","^1:"]]]],"~$print-length-loop",["^ ","^O",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^7",28,"^1;",["^ ","^Y",true,"^1<",1,"^10",1,"^V",["^Q",[["^Q",["~$bindings","^15"]]]],"^P",["^Q",[["^1C","~$&","^15"]]],"^X",["^Q",[null]]],"^5",11,"^4",102,"^18",true,"^6",102,"^P",["^Q",["^R",["^Q",[["^1C","~$&","^15"]]]]],"~:doc","A version of loop that iterates at most *print-length* times. This is designed\n  for use in pretty-printer dispatch functions."],"^B","~$cljs.pprint$macros/print-length-loop","^3","cljs/pprint$macros.cljc","^7",28,"^1;",["^ ","^Y",true,"^1<",1,"^10",1,"^V",["^Q",[["^Q",["^1C","^15"]]]],"^P",["^Q",[["^1C","~$&","^15"]]],"^X",["^Q",[null]]],"^V",["^Q",[["^Q",["^1C","^15"]]]],"^W",null,"^1<",1,"^X",["^Q",[null]],"^5",1,"^Y",true,"^1>",[["^ ","^1<",1,"^Y",true,"^1?",["^?",["^1@","^1A"]]]],"^4",102,"^18",true,"^Z","^[","^6",102,"^10",1,"^11",false,"^P",["^Q",[["^1C","~$&","^15"]]],"^1D","A version of loop that iterates at most *print-length* times. This is designed\n  for use in pretty-printer dispatch functions."],"~$defdirectives",["^ ","^O",null,"^2",["^ ","^13",true,"^3","cljs/pprint$macros.cljc","^7",16,"^1;",["^ ","^Y",true,"^1<",0,"^10",0,"^V",["^Q",[["^Q",["~$directives"]]]],"^P",["^Q",[["~$&","^1G"]]],"^X",["^Q",[null]]],"^5",3,"^4",122,"^18",true,"^6",122,"^P",["^Q",["^R",["^Q",[["~$&","^1G"]]]]]],"^13",true,"^B","~$cljs.pprint$macros/defdirectives","^3","cljs/pprint$macros.cljc","^7",16,"^1;",["^ ","^Y",true,"^1<",0,"^10",0,"^V",["^Q",[["^Q",["^1G"]]]],"^P",["^Q",[["~$&","^1G"]]],"^X",["^Q",[null]]],"^V",["^Q",[["^Q",["^1G"]]]],"^W",null,"^1<",0,"^X",["^Q",[null]],"^5",1,"^Y",true,"^1>",[["^ ","^1<",0,"^Y",true,"^1?",["^?",["^1@","^1A"]]]],"^4",121,"^18",true,"^Z","^[","^6",122,"^10",0,"^11",false,"^P",["^Q",[["~$&","^1G"]]]],"~$pll-mod-body",["^ ","^O",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^4",90,"^5",8,"^6",90,"^7",20,"^13",true,"^P",["^Q",["^R",["^Q",[["^S","~$var-sym","^15"]]]]]],"^13",true,"^B","~$cljs.pprint$macros/pll-mod-body","^3","cljs/pprint$macros.cljc","^7",20,"^V",["^Q",[["^S","^1J","^15"]]],"^W",null,"^X",["^Q",[null,null]],"^5",1,"^Y",false,"^4",90,"^6",90,"^10",3,"^11",true,"^P",["^Q",["^R",["^Q",[["^S","^1J","^15"]]]]]],"~$getf",["^ ","^O",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^4",28,"^5",11,"^6",28,"^7",15,"^18",true,"^P",["^Q",["^R",["^Q",[["~$sym"]]]]],"^1D","Get the value of the field a named by the argument (which should be a keyword)."],"^B","~$cljs.pprint$macros/getf","^3","cljs/pprint$macros.cljc","^7",15,"^V",["^Q",[["~$&form","~$&env","^1M"]]],"^W",null,"^X",["^Q",[null,null]],"^5",1,"^Y",false,"^4",28,"^18",true,"^Z",["^?",["^1@","^1A"]],"^6",28,"^10",3,"^11",false,"^P",["^Q",["^R",["^Q",[["^1M"]]]]],"^1D","Get the value of the field a named by the argument (which should be a keyword)."],"~$pprint-logical-block",["^ ","^O",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^7",31,"^1;",["^ ","^Y",true,"^1<",0,"^10",0,"^V",["^Q",[["^Q",["~$args"]]]],"^P",["^Q",[["~$&","^1R"]]],"^X",["^Q",[null]]],"^5",11,"^4",58,"^18",true,"^6",58,"^P",["^Q",["^R",["^Q",[["~$&","^1R"]]]]],"^1D","Execute the body as a pretty printing logical block with output to *out* which\n  must be a pretty printing writer. When used from pprint or cl-format, this can be\n  assumed.\n\n  This function is intended for use when writing custom dispatch functions.\n\n  Before the body, the caller can optionally specify options: :prefix, :per-line-prefix\n  and :suffix."],"^B","~$cljs.pprint$macros/pprint-logical-block","^3","cljs/pprint$macros.cljc","^7",31,"^1;",["^ ","^Y",true,"^1<",0,"^10",0,"^V",["^Q",[["^Q",["^1R"]]]],"^P",["^Q",[["~$&","^1R"]]],"^X",["^Q",[null]]],"^V",["^Q",[["^Q",["^1R"]]]],"^W",null,"^1<",0,"^X",["^Q",[null]],"^5",1,"^Y",true,"^1>",[["^ ","^1<",0,"^Y",true,"^1?",["^?",["^1@","^1A"]]]],"^4",58,"^18",true,"^Z","^[","^6",58,"^10",0,"^11",false,"^P",["^Q",[["~$&","^1R"]]],"^1D","Execute the body as a pretty printing logical block with output to *out* which\n  must be a pretty printing writer. When used from pprint or cl-format, this can be\n  assumed.\n\n  This function is intended for use when writing custom dispatch functions.\n\n  Before the body, the caller can optionally specify options: :prefix, :per-line-prefix\n  and :suffix."],"~$pp",["^ ","^O",null,"^2",["^ ","~:added","1.2","^3","cljs/pprint$macros.cljc","^7",13,"^5",11,"^4",163,"^18",true,"^6",163,"^P",["^Q",["^R",["^Q",[[]]]]],"^1D","A convenience macro that pretty prints the last thing output. This is\nexactly equivalent to (pprint *1)."],"^1U","1.2","^B","~$cljs.pprint$macros/pp","^3","cljs/pprint$macros.cljc","^7",13,"^V",["^Q",[["^1O","^1P"]]],"^W",null,"^X",["^Q",[null,null]],"^5",1,"^Y",false,"^4",163,"^18",true,"^Z",["^?",["^1@","^1A"]],"^6",163,"^10",2,"^11",false,"^P",["^Q",["^R",["^Q",[[]]]]],"^1D","A convenience macro that pretty prints the last thing output. This is\nexactly equivalent to (pprint *1)."],"~$process-directive-table-element",["^ ","^O",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^4",113,"^5",8,"^6",113,"^7",39,"^13",true,"^P",["^Q",["^R",["^Q",[[["~$char","~$params","~$flags","~$bracket-info","~$&","~$generator-fn"]]]]]]],"^13",true,"^B","~$cljs.pprint$macros/process-directive-table-element","^3","cljs/pprint$macros.cljc","^7",39,"^V",["^Q",[["~$p__16845"]]],"^W",null,"^X",["^Q",[null,null]],"^5",1,"^Y",false,"^4",113,"^Z","^17","^6",113,"^10",1,"^11",true,"^P",["^Q",["^R",["^Q",[[["^1X","^1Y","^1Z","^1[","~$&","^20"]]]]]]],"~$formatter-out",["^ ","^O",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^4",143,"^5",11,"^6",143,"^7",24,"^18",true,"^P",["^Q",["^R",["^Q",[["~$format-in"]]]]],"^1D","Makes a function which can directly run format-in. The function is\nfn [& args] ... and returns nil. This version of the formatter macro is\ndesigned to be used with *out* set to an appropriate Writer. In particular,\nthis is meant to be used as part of a pretty printer dispatch method.\n\nformat-in can be either a control string or a previously compiled format."],"^B","~$cljs.pprint$macros/formatter-out","^3","cljs/pprint$macros.cljc","^7",24,"^V",["^Q",[["^1O","^1P","^24"]]],"^W",null,"^X",["^Q",[null,null]],"^5",1,"^Y",false,"^4",143,"^18",true,"^Z",["^?",["^1@","^1A"]],"^6",143,"^10",3,"^11",false,"^P",["^Q",["^R",["^Q",[["^24"]]]]],"^1D","Makes a function which can directly run format-in. The function is\nfn [& args] ... and returns nil. This version of the formatter macro is\ndesigned to be used with *out* set to an appropriate Writer. In particular,\nthis is meant to be used as part of a pretty printer dispatch method.\n\nformat-in can be either a control string or a previously compiled format."],"~$formatter",["^ ","^O",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^4",127,"^5",11,"^6",127,"^7",20,"^18",true,"^P",["^Q",["^R",["^Q",[["^24"]]]]],"^1D","Makes a function which can directly run format-in. The function is\nfn [stream & args] ... and returns nil unless the stream is nil (meaning\noutput to a string) in which case it returns the resulting string.\n\nformat-in can be either a control string or a previously compiled format."],"^B","~$cljs.pprint$macros/formatter","^3","cljs/pprint$macros.cljc","^7",20,"^V",["^Q",[["^1O","^1P","^24"]]],"^W",null,"^X",["^Q",[null,null]],"^5",1,"^Y",false,"^4",127,"^18",true,"^Z",["^?",["^1@","^1A"]],"^6",127,"^10",3,"^11",false,"^P",["^Q",["^R",["^Q",[["^24"]]]]],"^1D","Makes a function which can directly run format-in. The function is\nfn [stream & args] ... and returns nil unless the stream is nil (meaning\noutput to a string) in which case it returns the resulting string.\n\nformat-in can be either a control string or a previously compiled format."],"~$with-pretty-writer",["^ ","^O",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^4",18,"^5",11,"^6",18,"^7",29,"^18",true,"^P",["^Q",["^R",["^Q",[["~$base-writer","~$&","^15"]]]]],"^1;",["^ ","^Y",true,"^1<",1,"^10",1,"^V",["^Q",[["^Q",["^29","^15"]]]],"^P",["^Q",[["^29","~$&","^15"]]],"^X",["^Q",[null]]]],"^B","~$cljs.pprint$macros/with-pretty-writer","^3","cljs/pprint$macros.cljc","^7",29,"^1;",["^ ","^Y",true,"^1<",1,"^10",1,"^V",["^Q",[["^Q",["^29","^15"]]]],"^P",["^Q",[["^29","~$&","^15"]]],"^X",["^Q",[null]]],"^V",["^Q",[["^Q",["^29","^15"]]]],"^W",null,"^1<",1,"^X",["^Q",[null]],"^5",1,"^Y",true,"^1>",[["^ ","^1<",1,"^Y",true,"^1?",["^?",["^1@","^1A"]]]],"^4",18,"^18",true,"^Z","^[","^6",18,"^10",1,"^11",false,"^P",["^Q",[["^29","~$&","^15"]]]],"~$setf",["^ ","^O",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^4",35,"^5",11,"^6",35,"^7",15,"^18",true,"^P",["^Q",["^R",["^Q",[["^1M","~$new-val"]]]]],"^1D","Set the value of the field SYM to NEW-VAL"],"^B","~$cljs.pprint$macros/setf","^3","cljs/pprint$macros.cljc","^7",15,"^V",["^Q",[["^1O","^1P","^1M","^2<"]]],"^W",null,"^X",["^Q",[null,null]],"^5",1,"^Y",false,"^4",35,"^18",true,"^Z",["^?",["^1@","^1A"]],"^6",35,"^10",4,"^11",false,"^P",["^Q",["^R",["^Q",[["^1M","^2<"]]]]],"^1D","Set the value of the field SYM to NEW-VAL"],"~$with-pprint-dispatch",["^ ","^O",null,"^2",["^ ","^3","cljs/pprint$macros.cljc","^7",31,"^1;",["^ ","^Y",true,"^1<",1,"^10",1,"^V",["^Q",[["^Q",["~$function","^15"]]]],"^P",["^Q",[["^2?","~$&","^15"]]],"^X",["^Q",[null]]],"^5",11,"^4",157,"^18",true,"^6",157,"^P",["^Q",["^R",["^Q",[["^2?","~$&","^15"]]]]],"^1D","Execute body with the pretty print dispatch function bound to function."],"^B","~$cljs.pprint$macros/with-pprint-dispatch","^3","cljs/pprint$macros.cljc","^7",31,"^1;",["^ ","^Y",true,"^1<",1,"^10",1,"^V",["^Q",[["^Q",["^2?","^15"]]]],"^P",["^Q",[["^2?","~$&","^15"]]],"^X",["^Q",[null]]],"^V",["^Q",[["^Q",["^2?","^15"]]]],"^W",null,"^1<",1,"^X",["^Q",[null]],"^5",1,"^Y",true,"^1>",[["^ ","^1<",1,"^Y",true,"^1?",["^?",["^1@","^1A"]]]],"^4",157,"^18",true,"^Z","^[","^6",157,"^10",1,"^11",false,"^P",["^Q",[["^2?","~$&","^15"]]],"^1D","Execute body with the pretty print dispatch function bound to function."]],"~:require-macros",["^ ","^<","^<"],"~:cljs.analyzer/constants",["^ ","^K",["^?",["~$&","~$navigator__16914__auto__","~:suffix","~$cljs.core/<","~$args__16913__auto__","~$-write","~$cljs.core/binding","~$cljs.pprint/*print-pprint-dispatch*","~$format-in__16871__auto__","~$cljs.core/=","~$type-tag","~$cljs.core/array-map","~$cljs.pprint/pretty-writer?","~$cljs.core/deref","~$cljs.core/hash-map","~$navigator__16881__auto__","~$loop*","~:generator-fn","~$cljs.pprint/*current-level*","~$cljs.core/string?","~$cljs.core/*1","~$cljs.pprint/*print-miser-width*","~$my-i-n__16874__auto__","~$cf__16875__auto__","~$cljs.pprint/execute-format","~$cljs.core/defn-","~:params","~$fn","~$cljs.core/*out*","~$cljs.pprint/make-pretty-writer","~$my-e-f__16873__auto__","~$do","~$this","~$offset","~$if","~:prefix","~$cljs.pprint/-ppflush","~$cljs.core/swap!","~$cljs.core/let","~$my-c-c__16872__auto__","~$cljs.pprint/*print-right-margin*","~$cljs.core/*print-length*","^1Y","~$cljs.core/defrecord","~$directive-table","~$cljs.core/loop","~$cljs.pprint/init-navigator","~$recur","~$args__16878__auto__","~:per-line-prefix","~$cljs.core/fn","~$cljs.pprint/start-block","~$cljs.pprint/end-block","~$format-in__16911__auto__","~$x__16732__auto__","~$cljs.core/not","~$cljs.core/assoc","~$cljs.pprint/level-exceeded","~:bracket-info","~$cljs.pprint/pprint","~$new-writer__16684__auto__","~:flags","~$cf__16912__auto__","~:directive","~:type-tag","~$cljs.pprint/cached-compile","~$cljs.core/or","~$base-writer__16683__auto__","~$cljs.core/inc","~$def","~$cljs.pprint/*current-length*","~$stream__16876__auto__"]],"~:order",["^3<","^3X","^3Q","^3L","^2N","^2H","^32","^38","^33","^3>","^2W","^3:","^2O","^36","^3;","^3M","^35","^3@","^2L","^2[","^3K","^2K","^3U","^2D","^39","^3F","^3N","^2G","^2T","^3Y","^3[","^3H","^3I","^2R","^3D","^3B","^3W","^3?","^2E","^3T","^30","^3R","^3O","^2S","^2M","^31","^1Y","^37","^3Z","^3A","^2P","^2J","^3=","^3V","^34","^2Z","^2X","^3C","^2Y","^2U","^3G","^40","~$&","^3E","^2Q","^3J","^3S","^2F","^2C","^2I","^3P","^2V"]],"^3R",["^ ","^L",["^?",[]]],"~:js-deps",["^ "],"~:deps",["^J","^<","^F","^H"]]