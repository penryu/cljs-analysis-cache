["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","cljs/tools/reader/impl/utils.cljs","~:line",9,"~:column",5,"~:end-line",9,"~:end-column",33],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.core","~$cljs.core"],"~:use-macros",null,"~:excludes",["~#set",["~$char"]],"~:name","~$cljs.tools.reader.impl.utils","~:imports",null,"~:requires",["^ ","~$clojure.string","^E","~$string","^E","~$goog.string","^G","~$gstring","^G","^<","^<","~$goog","^I"],"~:seen",["^?",["~:require"]],"~:shadow/js-access-global",["^?",["isNaN","parseInt"]],"~:uses",null,"~:defs",["^ ","~$reader-conditional",["^ ","~:protocol-inline",null,"^2",["^ ","^3","cljs/tools/reader/impl/utils.cljs","^4",29,"^5",7,"^6",29,"^7",25,"~:arglists",["~#list",["~$quote",["^R",[["~$form","~$splicing?"]]]]],"~:doc","Construct a data representation of a reader conditional.\n  If true, splicing? indicates read-cond-splicing."],"^A","~$cljs.tools.reader.impl.utils/reader-conditional","^3","cljs/tools/reader/impl/utils.cljs","^7",25,"~:method-params",["^R",[["^T","^U"]]],"~:protocol-impl",null,"~:arglists-meta",["^R",[null,null]],"^5",1,"~:variadic?",false,"^4",29,"~:ret-tag","~$cljs.tools.reader.impl.utils/ReaderConditional","^6",29,"~:max-fixed-arity",2,"~:fn-var",true,"^Q",["^R",["^S",["^R",[["^T","^U"]]]]],"^V","Construct a data representation of a reader conditional.\n  If true, splicing? indicates read-cond-splicing."],"~$whitespace?",["^ ","^P",null,"^2",["^ ","^3","cljs/tools/reader/impl/utils.cljs","^4",43,"^5",16,"^6",43,"^7",27,"~:tag","~$boolean","^Q",["^R",["^S",["^R",[["~$ch"]]]]],"^V","Checks whether a given character is whitespace"],"^A","~$cljs.tools.reader.impl.utils/whitespace?","^3","cljs/tools/reader/impl/utils.cljs","^7",27,"^X",["^R",[["^17"]]],"^Y",null,"^Z",["^R",[null,null]],"^5",1,"^[",false,"^4",43,"^10","^16","^6",43,"^12",1,"^15","^16","^13",true,"^Q",["^R",["^S",["^R",[["^17"]]]]],"^V","Checks whether a given character is whitespace"],"~$char-code",["^ ","^P",null,"^2",["^ ","^3","cljs/tools/reader/impl/utils.cljs","^4",99,"^5",7,"^6",99,"^7",16,"^Q",["^R",["^S",["^R",[["^17","~$base"]]]]]],"^A","~$cljs.tools.reader.impl.utils/char-code","^3","cljs/tools/reader/impl/utils.cljs","^7",16,"^X",["^R",[["^17","^1:"]]],"^Y",null,"^Z",["^R",[null,null]],"^5",1,"^[",false,"^4",99,"^10",["^?",["~$js","~$number"]],"^6",99,"^12",2,"^13",true,"^Q",["^R",["^S",["^R",[["^17","^1:"]]]]]],"~$last-id",["^ ","^A","~$cljs.tools.reader.impl.utils/last-id","^3","cljs/tools/reader/impl/utils.cljs","^4",73,"^5",1,"^6",73,"^7",13,"^2",["^ ","^3","cljs/tools/reader/impl/utils.cljs","^4",73,"^5",6,"^6",73,"^7",13],"^15","~$cljs.core/Atom"],"^@",["^ ","^P",null,"^2",["^ ","^3","cljs/tools/reader/impl/utils.cljs","^4",15,"^5",7,"^6",15,"^7",11,"^Q",["^R",["^S",["^R",[["~$x"]]]]]],"^A","~$cljs.tools.reader.impl.utils/char","^3","cljs/tools/reader/impl/utils.cljs","^7",11,"^X",["^R",[["~$x"]]],"^Y",null,"^Z",["^R",[null,null]],"^5",1,"^[",false,"^4",15,"^10",["^?",[null,"^1<","~$clj-nil"]],"^6",15,"^12",1,"^13",true,"^Q",["^R",["^S",["^R",[["~$x"]]]]]],"~$numeric?",["^ ","^P",null,"^2",["^ ","^3","cljs/tools/reader/impl/utils.cljs","^4",51,"^5",16,"^6",51,"^7",24,"^15","^16","^Q",["^R",["^S",["^R",[["^17"]]]]],"^V","Checks whether a given character is numeric"],"^A","~$cljs.tools.reader.impl.utils/numeric?","^3","cljs/tools/reader/impl/utils.cljs","^7",24,"^X",["^R",[["^17"]]],"^Y",null,"^Z",["^R",[null,null]],"^5",1,"^[",false,"^4",51,"^10","^16","^6",51,"^12",1,"^15","^16","^13",true,"^Q",["^R",["^S",["^R",[["^17"]]]]],"^V","Checks whether a given character is numeric"],"~$ReaderConditional",["^ ","~:num-fields",2,"~:protocols",["^?",["~$cljs.core/IRecord","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^A","^11","^3","cljs/tools/reader/impl/utils.cljs","^7",29,"~:type",true,"^5",12,"~:internal-ctor",true,"^4",22,"~:record",true,"^6",22,"^15","~$function","~:skip-protocol-flag",["^?",["^1H","^1I","^1J","^1K","^1L","^1M","^1N","^1O","^1P","^1Q","^1R","^1S","^1T","^1U","^1V"]]],"~$second'",["^ ","^P",null,"^2",["^ ","^3","cljs/tools/reader/impl/utils.cljs","^4",96,"^5",7,"^6",96,"^7",14,"^Q",["^R",["^S",["^R",[[["~$a","~$b"]]]]]]],"^A","~$cljs.tools.reader.impl.utils/second'","^3","cljs/tools/reader/impl/utils.cljs","^7",14,"^X",["^R",[["~$p__7528"]]],"^Y",null,"^Z",["^R",[null,null]],"^5",1,"^[",false,"^4",96,"^10",["^?",[null,"~$any","^1B"]],"^6",96,"^12",1,"^13",true,"^Q",["^R",["^S",["^R",[[["~$a","~$b"]]]]]]],"~$desugar-meta",["^ ","^P",null,"^2",["^ ","^3","cljs/tools/reader/impl/utils.cljs","^4",64,"^5",7,"^6",64,"^7",19,"^Q",["^R",["^S",["^R",[["~$f"]]]]],"^V","Resolves syntactical sugar in metadata"],"^A","~$cljs.tools.reader.impl.utils/desugar-meta","^3","cljs/tools/reader/impl/utils.cljs","^7",19,"^X",["^R",[["~$f"]]],"^Y",null,"^Z",["^R",[null,null]],"^5",1,"^[",false,"^4",64,"^10",["^?",[null,"^1U"]],"^6",64,"^12",1,"^13",true,"^Q",["^R",["^S",["^R",[["~$f"]]]]],"^V","Resolves syntactical sugar in metadata"],"~$->ReaderConditional",["^ ","^P",null,"^2",["^ ","^3","cljs/tools/reader/impl/utils.cljs","^7",29,"^5",12,"^1X",true,"~:factory","~:positional","^4",22,"^6",22,"^Q",["^R",["^S",["^R",[["^U","^T"]]]]],"^V","Positional factory function for cljs.tools.reader.impl.utils/ReaderConditional."],"^A","~$cljs.tools.reader.impl.utils/->ReaderConditional","^3","cljs/tools/reader/impl/utils.cljs","^7",29,"^X",["^R",[["^U","^T"]]],"^Y",null,"^Z",["^R",[null,null]],"^5",1,"^1X",true,"^[",false,"^27","^28","^4",22,"^10","^11","^6",22,"^12",2,"^13",true,"^Q",["^R",["^S",["^R",[["^U","^T"]]]]],"^V","Positional factory function for cljs.tools.reader.impl.utils/ReaderConditional."],"~$next-id",["^ ","^P",null,"^2",["^ ","^3","cljs/tools/reader/impl/utils.cljs","^4",75,"^5",7,"^6",75,"^7",14,"^Q",["^R",["^S",["^R",[[]]]]]],"^A","~$cljs.tools.reader.impl.utils/next-id","^3","cljs/tools/reader/impl/utils.cljs","^7",14,"^X",["^R",[[]]],"^Y",null,"^Z",["^R",[null,null]],"^5",1,"^[",false,"^4",75,"^10",["^?",[null,"^23"]],"^6",75,"^12",0,"^13",true,"^Q",["^R",["^S",["^R",[[]]]]]],"~$map->ReaderConditional",["^ ","^P",null,"^2",["^ ","^3","cljs/tools/reader/impl/utils.cljs","^7",29,"^5",12,"^1X",true,"^27","~:map","^4",22,"^6",22,"^Q",["^R",["^S",["^R",[["~$G__7480"]]]]],"^V","Factory function for cljs.tools.reader.impl.utils/ReaderConditional, taking a map of keywords to field values."],"^A","~$cljs.tools.reader.impl.utils/map->ReaderConditional","^3","cljs/tools/reader/impl/utils.cljs","^7",29,"^X",["^R",[["^2>"]]],"^Y",null,"^Z",["^R",[null,null]],"^5",1,"^1X",true,"^[",false,"^27","^2=","^4",22,"^10","^11","^6",22,"^12",1,"^13",true,"^Q",["^R",["^S",["^R",[["^2>"]]]]],"^V","Factory function for cljs.tools.reader.impl.utils/ReaderConditional, taking a map of keywords to field values."],"~$ex-info?",["^ ","^P",null,"^2",["^ ","^3","cljs/tools/reader/impl/utils.cljs","^4",19,"^5",16,"^6",19,"^7",24,"^15","^16","^Q",["^R",["^S",["^R",[["~$ex"]]]]]],"^A","~$cljs.tools.reader.impl.utils/ex-info?","^3","cljs/tools/reader/impl/utils.cljs","^7",24,"^X",["^R",[["^2A"]]],"^Y",null,"^Z",["^R",[null,null]],"^5",1,"^[",false,"^4",19,"^10","^16","^6",19,"^12",1,"^15","^16","^13",true,"^Q",["^R",["^S",["^R",[["^2A"]]]]]],"~$reader-conditional?",["^ ","^P",null,"^2",["^ ","^3","cljs/tools/reader/impl/utils.cljs","^4",24,"^5",16,"^6",24,"^7",35,"^15","^16","^Q",["^R",["^S",["^R",[["~$value"]]]]],"^V","Return true if the value is the data representation of a reader conditional"],"^A","~$cljs.tools.reader.impl.utils/reader-conditional?","^3","cljs/tools/reader/impl/utils.cljs","^7",35,"^X",["^R",[["^2D"]]],"^Y",null,"^Z",["^R",[null,null]],"^5",1,"^[",false,"^4",24,"^10","^16","^6",24,"^12",1,"^15","^16","^13",true,"^Q",["^R",["^S",["^R",[["^2D"]]]]],"^V","Return true if the value is the data representation of a reader conditional"],"~$newline?",["^ ","^P",null,"^2",["^ ","^3","cljs/tools/reader/impl/utils.cljs","^4",57,"^5",16,"^6",57,"^7",24,"^15","^16","^Q",["^R",["^S",["^R",[["~$c"]]]]],"^V","Checks whether the character is a newline"],"^A","~$cljs.tools.reader.impl.utils/newline?","^3","cljs/tools/reader/impl/utils.cljs","^7",24,"^X",["^R",[["~$c"]]],"^Y",null,"^Z",["^R",[null,null]],"^5",1,"^[",false,"^4",57,"^10","^16","^6",57,"^12",1,"^15","^16","^13",true,"^Q",["^R",["^S",["^R",[["~$c"]]]]],"^V","Checks whether the character is a newline"],"~$namespace-keys",["^ ","^P",null,"^2",["^ ","^3","cljs/tools/reader/impl/utils.cljs","^4",79,"^5",7,"^6",79,"^7",21,"^Q",["^R",["^S",["^R",[["~$ns","~$keys"]]]]]],"^A","~$cljs.tools.reader.impl.utils/namespace-keys","^3","cljs/tools/reader/impl/utils.cljs","^7",21,"^X",["^R",[["^2I","^2J"]]],"^Y",null,"^Z",["^R",[null,null]],"^5",1,"^[",false,"^4",79,"^10","~$cljs.core/LazySeq","^6",79,"^12",2,"^13",true,"^Q",["^R",["^S",["^R",[["^2I","^2J"]]]]]],"~$ws-rx",["^ ","^A","~$cljs.tools.reader.impl.utils/ws-rx","^3","cljs/tools/reader/impl/utils.cljs","^4",41,"^5",1,"^6",41,"^7",11,"^2",["^ ","^3","cljs/tools/reader/impl/utils.cljs","^4",41,"^5",6,"^6",41,"^7",11],"^15","^23"]],"~:require-macros",["^ ","^<","^<"],"~:cljs.analyzer/constants",["^ ","^J",["^?",["^T","~:else","~:splicing?","^U","~:form","^15"]],"~:order",["^2R","^2S","^U","^T","^15","^2Q"]],"~:flags",["^ ","^K",["^?",[]]],"~:js-deps",["^ "],"~:deps",["^I","^<","^E","^G"]]