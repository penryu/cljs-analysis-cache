["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","cljs/tools/reader/impl/utils.cljs","~:line",9,"~:column",5,"~:end-line",9,"~:end-column",33],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.core","~$cljs.core"],"~:use-macros",null,"~:excludes",["~#set",["~$char"]],"~:name","~$cljs.tools.reader.impl.utils","~:reader-aliases",["^ "],"~:imports",null,"~:requires",["^ ","~$clojure.string","^F","~$string","^F","~$goog.string","^H","~$gstring","^H","^<","^<","~$goog","^J"],"~:seen",["^?",["~:require"]],"~:shadow/js-access-global",["^?",["isNaN","parseInt"]],"~:uses",null,"~:defs",["^ ","~$reader-conditional",["^ ","~:protocol-inline",null,"^2",["^ ","^3","cljs/tools/reader/impl/utils.cljs","^4",29,"^5",7,"^6",29,"^7",25,"~:arglists",["~#list",["~$quote",["^S",[["~$form","~$splicing?"]]]]],"~:doc","Construct a data representation of a reader conditional.\n  If true, splicing? indicates read-cond-splicing."],"^A","~$cljs.tools.reader.impl.utils/reader-conditional","^3","cljs/tools/reader/impl/utils.cljs","^7",25,"~:method-params",["^S",[["^U","^V"]]],"~:protocol-impl",null,"~:arglists-meta",["^S",[null,null]],"^5",1,"~:variadic?",false,"^4",29,"~:ret-tag","~$cljs.tools.reader.impl.utils/ReaderConditional","^6",29,"~:max-fixed-arity",2,"~:fn-var",true,"^R",["^S",["^T",["^S",[["^U","^V"]]]]],"^W","Construct a data representation of a reader conditional.\n  If true, splicing? indicates read-cond-splicing."],"~$whitespace?",["^ ","^Q",null,"^2",["^ ","^3","cljs/tools/reader/impl/utils.cljs","^4",43,"^5",16,"^6",43,"^7",27,"~:tag","~$boolean","^R",["^S",["^T",["^S",[["~$ch"]]]]],"^W","Checks whether a given character is whitespace"],"^A","~$cljs.tools.reader.impl.utils/whitespace?","^3","cljs/tools/reader/impl/utils.cljs","^7",27,"^Y",["^S",[["^18"]]],"^Z",null,"^[",["^S",[null,null]],"^5",1,"^10",false,"^4",43,"^11","^17","^6",43,"^13",1,"^16","^17","^14",true,"^R",["^S",["^T",["^S",[["^18"]]]]],"^W","Checks whether a given character is whitespace"],"~$char-code",["^ ","^Q",null,"^2",["^ ","^3","cljs/tools/reader/impl/utils.cljs","^4",99,"^5",7,"^6",99,"^7",16,"^R",["^S",["^T",["^S",[["^18","~$base"]]]]]],"^A","~$cljs.tools.reader.impl.utils/char-code","^3","cljs/tools/reader/impl/utils.cljs","^7",16,"^Y",["^S",[["^18","^1;"]]],"^Z",null,"^[",["^S",[null,null]],"^5",1,"^10",false,"^4",99,"^11",["^?",["~$js","~$number"]],"^6",99,"^13",2,"^14",true,"^R",["^S",["^T",["^S",[["^18","^1;"]]]]]],"~$last-id",["^ ","^A","~$cljs.tools.reader.impl.utils/last-id","^3","cljs/tools/reader/impl/utils.cljs","^4",73,"^5",1,"^6",73,"^7",13,"^2",["^ ","^3","cljs/tools/reader/impl/utils.cljs","^4",73,"^5",6,"^6",73,"^7",13],"^16","~$cljs.core/Atom"],"^@",["^ ","^Q",null,"^2",["^ ","^3","cljs/tools/reader/impl/utils.cljs","^4",15,"^5",7,"^6",15,"^7",11,"^R",["^S",["^T",["^S",[["~$x"]]]]]],"^A","~$cljs.tools.reader.impl.utils/char","^3","cljs/tools/reader/impl/utils.cljs","^7",11,"^Y",["^S",[["~$x"]]],"^Z",null,"^[",["^S",[null,null]],"^5",1,"^10",false,"^4",15,"^11",["^?",[null,"^1=","~$clj-nil"]],"^6",15,"^13",1,"^14",true,"^R",["^S",["^T",["^S",[["~$x"]]]]]],"~$numeric?",["^ ","^Q",null,"^2",["^ ","^3","cljs/tools/reader/impl/utils.cljs","^4",51,"^5",16,"^6",51,"^7",24,"^16","^17","^R",["^S",["^T",["^S",[["^18"]]]]],"^W","Checks whether a given character is numeric"],"^A","~$cljs.tools.reader.impl.utils/numeric?","^3","cljs/tools/reader/impl/utils.cljs","^7",24,"^Y",["^S",[["^18"]]],"^Z",null,"^[",["^S",[null,null]],"^5",1,"^10",false,"^4",51,"^11","^17","^6",51,"^13",1,"^16","^17","^14",true,"^R",["^S",["^T",["^S",[["^18"]]]]],"^W","Checks whether a given character is numeric"],"~$ReaderConditional",["^ ","~:num-fields",2,"~:protocols",["^?",["~$cljs.core/IRecord","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^A","^12","^3","cljs/tools/reader/impl/utils.cljs","^7",29,"~:type",true,"^5",12,"~:internal-ctor",true,"^4",22,"~:record",true,"^6",22,"^16","~$function","~:skip-protocol-flag",["^?",["^1I","^1J","^1K","^1L","^1M","^1N","^1O","^1P","^1Q","^1R","^1S","^1T","^1U","^1V","^1W"]]],"~$second'",["^ ","^Q",null,"^2",["^ ","^3","cljs/tools/reader/impl/utils.cljs","^4",96,"^5",7,"^6",96,"^7",14,"^R",["^S",["^T",["^S",[[["~$a","~$b"]]]]]]],"^A","~$cljs.tools.reader.impl.utils/second'","^3","cljs/tools/reader/impl/utils.cljs","^7",14,"^Y",["^S",[["~$p__7465"]]],"^Z",null,"^[",["^S",[null,null]],"^5",1,"^10",false,"^4",96,"^11",["^?",[null,"~$any","^1C"]],"^6",96,"^13",1,"^14",true,"^R",["^S",["^T",["^S",[[["~$a","~$b"]]]]]]],"~$desugar-meta",["^ ","^Q",null,"^2",["^ ","^3","cljs/tools/reader/impl/utils.cljs","^4",64,"^5",7,"^6",64,"^7",19,"^R",["^S",["^T",["^S",[["~$f"]]]]],"^W","Resolves syntactical sugar in metadata"],"^A","~$cljs.tools.reader.impl.utils/desugar-meta","^3","cljs/tools/reader/impl/utils.cljs","^7",19,"^Y",["^S",[["~$f"]]],"^Z",null,"^[",["^S",[null,null]],"^5",1,"^10",false,"^4",64,"^11",["^?",[null,"^1V"]],"^6",64,"^13",1,"^14",true,"^R",["^S",["^T",["^S",[["~$f"]]]]],"^W","Resolves syntactical sugar in metadata"],"~$->ReaderConditional",["^ ","^Q",null,"^2",["^ ","^3","cljs/tools/reader/impl/utils.cljs","^7",29,"^5",12,"^1Y",true,"~:factory","~:positional","^4",22,"^6",22,"^R",["^S",["^T",["^S",[["^V","^U"]]]]],"^W","Positional factory function for cljs.tools.reader.impl.utils/ReaderConditional."],"^A","~$cljs.tools.reader.impl.utils/->ReaderConditional","^3","cljs/tools/reader/impl/utils.cljs","^7",29,"^Y",["^S",[["^V","^U"]]],"^Z",null,"^[",["^S",[null,null]],"^5",1,"^1Y",true,"^10",false,"^28","^29","^4",22,"^11","^12","^6",22,"^13",2,"^14",true,"^R",["^S",["^T",["^S",[["^V","^U"]]]]],"^W","Positional factory function for cljs.tools.reader.impl.utils/ReaderConditional."],"~$next-id",["^ ","^Q",null,"^2",["^ ","^3","cljs/tools/reader/impl/utils.cljs","^4",75,"^5",7,"^6",75,"^7",14,"^R",["^S",["^T",["^S",[[]]]]]],"^A","~$cljs.tools.reader.impl.utils/next-id","^3","cljs/tools/reader/impl/utils.cljs","^7",14,"^Y",["^S",[[]]],"^Z",null,"^[",["^S",[null,null]],"^5",1,"^10",false,"^4",75,"^11",["^?",[null,"^24"]],"^6",75,"^13",0,"^14",true,"^R",["^S",["^T",["^S",[[]]]]]],"~$map->ReaderConditional",["^ ","^Q",null,"^2",["^ ","^3","cljs/tools/reader/impl/utils.cljs","^7",29,"^5",12,"^1Y",true,"^28","~:map","^4",22,"^6",22,"^R",["^S",["^T",["^S",[["~$G__7406"]]]]],"^W","Factory function for cljs.tools.reader.impl.utils/ReaderConditional, taking a map of keywords to field values."],"^A","~$cljs.tools.reader.impl.utils/map->ReaderConditional","^3","cljs/tools/reader/impl/utils.cljs","^7",29,"^Y",["^S",[["^2?"]]],"^Z",null,"^[",["^S",[null,null]],"^5",1,"^1Y",true,"^10",false,"^28","^2>","^4",22,"^11","^12","^6",22,"^13",1,"^14",true,"^R",["^S",["^T",["^S",[["^2?"]]]]],"^W","Factory function for cljs.tools.reader.impl.utils/ReaderConditional, taking a map of keywords to field values."],"~$ex-info?",["^ ","^Q",null,"^2",["^ ","^3","cljs/tools/reader/impl/utils.cljs","^4",19,"^5",16,"^6",19,"^7",24,"^16","^17","^R",["^S",["^T",["^S",[["~$ex"]]]]]],"^A","~$cljs.tools.reader.impl.utils/ex-info?","^3","cljs/tools/reader/impl/utils.cljs","^7",24,"^Y",["^S",[["^2B"]]],"^Z",null,"^[",["^S",[null,null]],"^5",1,"^10",false,"^4",19,"^11","^17","^6",19,"^13",1,"^16","^17","^14",true,"^R",["^S",["^T",["^S",[["^2B"]]]]]],"~$reader-conditional?",["^ ","^Q",null,"^2",["^ ","^3","cljs/tools/reader/impl/utils.cljs","^4",24,"^5",16,"^6",24,"^7",35,"^16","^17","^R",["^S",["^T",["^S",[["~$value"]]]]],"^W","Return true if the value is the data representation of a reader conditional"],"^A","~$cljs.tools.reader.impl.utils/reader-conditional?","^3","cljs/tools/reader/impl/utils.cljs","^7",35,"^Y",["^S",[["^2E"]]],"^Z",null,"^[",["^S",[null,null]],"^5",1,"^10",false,"^4",24,"^11","^17","^6",24,"^13",1,"^16","^17","^14",true,"^R",["^S",["^T",["^S",[["^2E"]]]]],"^W","Return true if the value is the data representation of a reader conditional"],"~$newline?",["^ ","^Q",null,"^2",["^ ","^3","cljs/tools/reader/impl/utils.cljs","^4",57,"^5",16,"^6",57,"^7",24,"^16","^17","^R",["^S",["^T",["^S",[["~$c"]]]]],"^W","Checks whether the character is a newline"],"^A","~$cljs.tools.reader.impl.utils/newline?","^3","cljs/tools/reader/impl/utils.cljs","^7",24,"^Y",["^S",[["~$c"]]],"^Z",null,"^[",["^S",[null,null]],"^5",1,"^10",false,"^4",57,"^11","^17","^6",57,"^13",1,"^16","^17","^14",true,"^R",["^S",["^T",["^S",[["~$c"]]]]],"^W","Checks whether the character is a newline"],"~$namespace-keys",["^ ","^Q",null,"^2",["^ ","^3","cljs/tools/reader/impl/utils.cljs","^4",79,"^5",7,"^6",79,"^7",21,"^R",["^S",["^T",["^S",[["~$ns","~$keys"]]]]]],"^A","~$cljs.tools.reader.impl.utils/namespace-keys","^3","cljs/tools/reader/impl/utils.cljs","^7",21,"^Y",["^S",[["^2J","^2K"]]],"^Z",null,"^[",["^S",[null,null]],"^5",1,"^10",false,"^4",79,"^11","~$cljs.core/LazySeq","^6",79,"^13",2,"^14",true,"^R",["^S",["^T",["^S",[["^2J","^2K"]]]]]],"~$ws-rx",["^ ","^A","~$cljs.tools.reader.impl.utils/ws-rx","^3","cljs/tools/reader/impl/utils.cljs","^4",41,"^5",1,"^6",41,"^7",11,"^2",["^ ","^3","cljs/tools/reader/impl/utils.cljs","^4",41,"^5",6,"^6",41,"^7",11],"^16","^24"]],"~:require-macros",["^ ","^<","^<"],"~:cljs.analyzer/constants",["^ ","^K",["^?",["^U","~:else","~:splicing?","^V","~:form","^16"]],"~:order",["^2S","^2T","^V","^U","^16","^2R"]],"~:flags",["^ ","^L",["^?",[]]],"~:js-deps",[],"~:deps",["^J","^<","^F","^H"]]