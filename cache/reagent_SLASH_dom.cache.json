["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$reagent.dom","~:imports",null,"~:requires",["^ ","~$input","~$reagent.impl.input","~$reagent.impl.util","^=","~$reagent.impl.protocols","^>","~$p","^>","~$reagent.ratom","^?","~$reagent.impl.template","^@","~$reagent.impl.batching","^A","~$util","^=","~$tmpl","^@","~$ratom","^?","~$batch","^A","^<","^<","~$react-dom","^F"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$roots",["^ ","~:meta",["^ ","~:file","^8","~:line",10,"~:column",20,"~:end-line",10,"~:end-column",25,"~:private",true],"^Q",true,"^7","~$reagent.dom/roots","^L","reagent/dom.cljs","^P",25,"^N",1,"^M",10,"^O",10,"~:tag","~$cljs.core/Atom"],"~$unmount-comp",["^ ","~:protocol-inline",null,"^K",["^ ","^L","^8","^M",12,"^N",8,"^O",12,"^P",20,"^Q",true,"~:arglists",["~#list",["~$quote",["^X",[["~$container"]]]]]],"^Q",true,"^7","~$reagent.dom/unmount-comp","^L","reagent/dom.cljs","^P",20,"~:method-params",["^X",[["^Z"]]],"~:protocol-impl",null,"~:arglists-meta",["^X",[null,null]],"^N",1,"~:variadic?",false,"^M",12,"~:ret-tag","~$any","^O",12,"~:max-fixed-arity",1,"~:fn-var",true,"^W",["^X",["^Y",["^X",[["^Z"]]]]]],"~$render-comp",["^ ","^V",null,"^K",["^ ","^L","^8","^M",16,"^N",8,"^O",16,"^P",19,"^Q",true,"^W",["^X",["^Y",["^X",[["~$comp","^Z","~$callback"]]]]]],"^Q",true,"^7","~$reagent.dom/render-comp","^L","reagent/dom.cljs","^P",19,"^10",["^X",[["^19","^Z","^1:"]]],"^11",null,"^12",["^X",[null,null]],"^N",1,"^13",false,"^M",16,"^O",16,"^16",3,"^17",true,"^W",["^X",["^Y",["^X",[["^19","^Z","^1:"]]]]]],"~$re-render-component",["^ ","^V",null,"^K",["^ ","^L","^8","^M",26,"^N",8,"^O",26,"^P",27,"^Q",true,"^W",["^X",["^Y",["^X",[["^19","^Z"]]]]]],"^Q",true,"^7","~$reagent.dom/re-render-component","^L","reagent/dom.cljs","^P",27,"^10",["^X",[["^19","^Z"]]],"^11",null,"^12",["^X",[null,null]],"^N",1,"^13",false,"^M",26,"^14","^15","^O",26,"^16",2,"^17",true,"^W",["^X",["^Y",["^X",[["^19","^Z"]]]]]],"~$render",["^ ","^V",null,"^K",["^ ","^L","^8","^M",29,"^N",7,"^O",29,"^P",13,"^W",["^X",["^Y",["^X",[["^19","^Z"],["^19","^Z","~$callback-or-compiler"]]]]],"~:doc","Render a Reagent component into the DOM. The first argument may be\n  either a vector (using Reagent's Hiccup syntax), or a React element.\n  The second argument should be a DOM node.\n\n  Optionally takes a callback that is called when the component is in place.\n\n  Returns the mounted component instance.","~:top-fn",["^ ","^13",false,"~:fixed-arity",3,"^16",3,"^10",["^X",[["^19","^Z"],["^19","^Z","^1?"]]],"^W",["^X",[["^19","^Z"],["^19","^Z","^1?"]]],"^12",["^X",[null,null]]]],"^7","~$reagent.dom/render","^L","reagent/dom.cljs","^P",13,"^1A",["^ ","^13",false,"^1B",3,"^16",3,"^10",["^X",[["^19","^Z"],["^19","^Z","^1?"]]],"^W",["^X",[["^19","^Z"],["^19","^Z","^1?"]]],"^12",["^X",[null,null]]],"^10",["^X",[["^19","^Z"],["^19","^Z","^1?"]]],"^11",null,"^1B",3,"^12",["^X",[null,null]],"^N",1,"^13",false,"~:methods",[["^ ","^1B",2,"^13",false,"^S","^15"],["^ ","^1B",3,"^13",false,"^S","^15"]],"^M",29,"^O",29,"^16",3,"^17",true,"^W",["^X",[["^19","^Z"],["^19","^Z","^1?"]]],"^1@","Render a Reagent component into the DOM. The first argument may be\n  either a vector (using Reagent's Hiccup syntax), or a React element.\n  The second argument should be a DOM node.\n\n  Optionally takes a callback that is called when the component is in place.\n\n  Returns the mounted component instance."],"~$unmount-component-at-node",["^ ","^V",null,"^K",["^ ","^L","^8","^M",50,"^N",7,"^O",50,"^P",32,"^W",["^X",["^Y",["^X",[["^Z"]]]]],"^1@","Remove a component from the given DOM node."],"^7","~$reagent.dom/unmount-component-at-node","^L","reagent/dom.cljs","^P",32,"^10",["^X",[["^Z"]]],"^11",null,"^12",["^X",[null,null]],"^N",1,"^13",false,"^M",50,"^14","^15","^O",50,"^16",1,"^17",true,"^W",["^X",["^Y",["^X",[["^Z"]]]]],"^1@","Remove a component from the given DOM node."],"~$dom-node",["^ ","^V",null,"^K",["^ ","^L","^8","^M",55,"^N",7,"^O",55,"^P",15,"^W",["^X",["^Y",["^X",[["~$this"]]]]],"^1@","Returns the root DOM node of a mounted component."],"^7","~$reagent.dom/dom-node","^L","reagent/dom.cljs","^P",15,"^10",["^X",[["^1H"]]],"^11",null,"^12",["^X",[null,null]],"^N",1,"^13",false,"^M",55,"^14","^15","^O",55,"^16",1,"^17",true,"^W",["^X",["^Y",["^X",[["^1H"]]]]],"^1@","Returns the root DOM node of a mounted component."],"~$force-update-all",["^ ","^V",null,"^K",["^ ","^L","^8","^M",60,"^N",7,"^O",60,"^P",23,"^W",["^X",["^Y",["^X",[[]]]]],"^1@","Force re-rendering of all mounted Reagent components. This is\n  probably only useful in a development environment, when you want to\n  update components in response to some dynamic changes to code.\n\n  Note that force-update-all may not update root components. This\n  happens if a component 'foo' is mounted with `(render [foo])` (since\n  functions are passed by value, and not by reference, in\n  ClojureScript). To get around this you'll have to introduce a layer\n  of indirection, for example by using `(render [#'foo])` instead."],"^7","~$reagent.dom/force-update-all","^L","reagent/dom.cljs","^P",23,"^10",["^X",[[]]],"^11",null,"^12",["^X",[null,null]],"^N",1,"^13",false,"^M",60,"^14","^15","^O",60,"^16",0,"^17",true,"^W",["^X",["^Y",["^X",[[]]]]],"^1@","Force re-rendering of all mounted Reagent components. This is\n  probably only useful in a development environment, when you want to\n  update components in response to some dynamic changes to code.\n\n  Note that force-update-all may not update root components. This\n  happens if a component 'foo' is mounted with `(render [foo])` (since\n  functions are passed by value, and not by reference, in\n  ClojureScript). To get around this you'll have to introduce a layer\n  of indirection, for example by using `(render [#'foo])` instead."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^?","^?","^D","^?"],"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:callback"]],"~:order",["^1P"]],"^1@",null]