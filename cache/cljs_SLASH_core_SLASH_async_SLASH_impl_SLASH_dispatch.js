// Compiled by ClojureScript 1.10.597
goog.provide("cljs.core.async.impl.dispatch");
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null,(32));
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = (1024);
cljs.core.async.impl.dispatch.process_messages = (function cljs$core$async$impl$dispatch$process_messages(){
(cljs.core.async.impl.dispatch.running_QMARK_ = true);

(cljs.core.async.impl.dispatch.queued_QMARK_ = false);

var count_28 = (0);
while(true){
var m_29 = cljs.core.async.impl.dispatch.tasks.pop();
if((m_29 == null)){
} else {
m_29.call(null);

if((count_28 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE)){
var G__30 = (count_28 + (1));
count_28 = G__30;
continue;
} else {
}
}
break;
}

(cljs.core.async.impl.dispatch.running_QMARK_ = false);

if((cljs.core.async.impl.dispatch.tasks.length > (0))){
return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
} else {
return null;
}
});
cljs.core.async.impl.dispatch.queue_dispatcher = (function cljs$core$async$impl$dispatch$queue_dispatcher(){
if(((cljs.core.async.impl.dispatch.queued_QMARK_) && (cljs.core.async.impl.dispatch.running_QMARK_))){
return null;
} else {
(cljs.core.async.impl.dispatch.queued_QMARK_ = true);

return goog.async.nextTick.call(null,cljs.core.async.impl.dispatch.process_messages);
}
});
cljs.core.async.impl.dispatch.run = (function cljs$core$async$impl$dispatch$run(f){
cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);

return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
});
cljs.core.async.impl.dispatch.queue_delay = (function cljs$core$async$impl$dispatch$queue_delay(f,delay){
return setTimeout(f,delay);
});

//# sourceURL=cljs/core/async/impl/dispatch.js
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xqcy9jb3JlL2FzeW5jL2ltcGwvZGlzcGF0Y2guanMiLCJzb3VyY2VzIjpbImRpc3BhdGNoLmNsanMiXSwibGluZUNvdW50Ijo1NSwibWFwcGluZ3MiOiI7QUFJQSxBQUFLQSxzQ0FBTSxtREFBQSxuREFBQ0M7QUFDWiwrQ0FBQSwvQ0FBS0M7QUFDTCw4Q0FBQSw5Q0FBS0M7QUFFTCxnREFBQSxoREFBS0M7QUFFTCxBQUFBLEFBRUEsaURBQUEsakRBQU1DO0FBQU4sQUFDRSxnREFBQSwvQ0FBTUg7O0FBQ04sK0NBQUEsOUNBQU1DOztBQUNOLGVBQUEsWEFBT0c7O0FBQVAsQUFDRSxJQUFNQyxPQUFFLEFBQU1QO0FBQWQsQUFDRSxHQUFVLFNBQUEsUkFBTU87QUFBaEI7QUFBQSxBQUNFLEFBQUNBOztBQUNELEdBQU0sQ0FBR0QsV0FBTUY7QUFBZixBQUNFLFlBQU8sWUFBQSxYQUFLRTs7OztBQURkOzs7OztBQUVOLGdEQUFBLC9DQUFNSjs7QUFDTixHQUFNLDhDQUFBLDdDQUFHLEFBQVVGO0FBQW5CLEFBQ0UsT0FBQ1E7O0FBREg7OztBQUdGLGlEQUFBLGpEQUFNQTtBQUFOLEFBQ0UsR0FBVSxFQUFLTCxpREFBUUQ7QUFBdkI7O0FBQUEsQUFDRSwrQ0FBQSw5Q0FBTUM7O0FBQ04sT0FBQyxBQUFBTSw4QkFBb0JKOzs7QUFFekIsb0NBQUEscENBQU1LLGdGQUFLQztBQUFYLEFBQ0UsQUFBb0JYLHNEQUFNVzs7QUFDMUIsT0FBQ0g7O0FBRUgsNENBQUEsNUNBQU1JLGdHQUFhRCxFQUFFRTtBQUFyQixBQUNFLE9BQUNDLFdBQWNILEVBQUVFIiwibmFtZXMiOlsiY2xqcy5jb3JlLmFzeW5jLmltcGwuZGlzcGF0Y2gvdGFza3MiLCJjbGpzLmNvcmUuYXN5bmMuaW1wbC5idWZmZXJzL3JpbmctYnVmZmVyIiwiY2xqcy5jb3JlLmFzeW5jLmltcGwuZGlzcGF0Y2gvcnVubmluZz8iLCJjbGpzLmNvcmUuYXN5bmMuaW1wbC5kaXNwYXRjaC9xdWV1ZWQ/IiwiY2xqcy5jb3JlLmFzeW5jLmltcGwuZGlzcGF0Y2gvVEFTS19CQVRDSF9TSVpFIiwiY2xqcy5jb3JlLmFzeW5jLmltcGwuZGlzcGF0Y2gvcHJvY2Vzcy1tZXNzYWdlcyIsImNvdW50IiwibSIsImNsanMuY29yZS5hc3luYy5pbXBsLmRpc3BhdGNoL3F1ZXVlLWRpc3BhdGNoZXIiLCJnb29nL2FzeW5jIiwiY2xqcy5jb3JlLmFzeW5jLmltcGwuZGlzcGF0Y2gvcnVuIiwiZiIsImNsanMuY29yZS5hc3luYy5pbXBsLmRpc3BhdGNoL3F1ZXVlLWRlbGF5IiwiZGVsYXkiLCJqcy9zZXRUaW1lb3V0Il0sInNvdXJjZXNDb250ZW50IjpbIihucyBjbGpzLmNvcmUuYXN5bmMuaW1wbC5kaXNwYXRjaFxuICAoOnJlcXVpcmUgW2NsanMuY29yZS5hc3luYy5pbXBsLmJ1ZmZlcnMgOmFzIGJ1ZmZlcnNdXG4gICAgICAgICAgICBbZ29vZy5hc3luYy5uZXh0VGlja10pKVxuXG4oZGVmIHRhc2tzIChidWZmZXJzL3JpbmctYnVmZmVyIDMyKSlcbihkZWYgcnVubmluZz8gZmFsc2UpXG4oZGVmIHF1ZXVlZD8gZmFsc2UpXG5cbihkZWYgVEFTS19CQVRDSF9TSVpFIDEwMjQpXG5cbihkZWNsYXJlIHF1ZXVlLWRpc3BhdGNoZXIpXG5cbihkZWZuIHByb2Nlc3MtbWVzc2FnZXMgW11cbiAgKHNldCEgcnVubmluZz8gdHJ1ZSlcbiAgKHNldCEgcXVldWVkPyBmYWxzZSlcbiAgKGxvb3AgW2NvdW50IDBdXG4gICAgKGxldCBbbSAoLnBvcCB0YXNrcyldXG4gICAgICAod2hlbi1ub3QgKG5pbD8gbSlcbiAgICAgICAgKG0pXG4gICAgICAgICh3aGVuICg8IGNvdW50IFRBU0tfQkFUQ0hfU0laRSlcbiAgICAgICAgICAocmVjdXIgKGluYyBjb3VudCkpKSkpKVxuICAoc2V0ISBydW5uaW5nPyBmYWxzZSlcbiAgKHdoZW4gKD4gKC4tbGVuZ3RoIHRhc2tzKSAwKVxuICAgIChxdWV1ZS1kaXNwYXRjaGVyKSkpXG5cbihkZWZuIHF1ZXVlLWRpc3BhdGNoZXIgW11cbiAgKHdoZW4tbm90IChhbmQgcXVldWVkPyBydW5uaW5nPylcbiAgICAoc2V0ISBxdWV1ZWQ/IHRydWUpXG4gICAgKGdvb2cuYXN5bmMubmV4dFRpY2sgcHJvY2Vzcy1tZXNzYWdlcykpKVxuXG4oZGVmbiBydW4gW2ZdXG4gICgudW5ib3VuZGVkLXVuc2hpZnQgdGFza3MgZilcbiAgKHF1ZXVlLWRpc3BhdGNoZXIpKVxuXG4oZGVmbiBxdWV1ZS1kZWxheSBbZiBkZWxheV1cbiAgKGpzL3NldFRpbWVvdXQgZiBkZWxheSkpXG5cbiJdfQ==