["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/set.cljs","~:line",11,"~:column",8,"~:end-line",11,"~:end-column",19,"~:doc","Set operations such as union/intersection.","~:author","Rich Hickey"],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.core","~$cljs.core"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$clojure.set","~:imports",null,"~:requires",["^ ","^>","^>","~$goog","^F"],"~:seen",["^A",[]],"~:shadow/js-access-global",["^A",["Error"]],"~:uses",null,"~:defs",["^ ","~$union",["^ ","~:protocol-inline",null,"^2",["^ ","^3","clojure/set.cljs","^4",19,"^5",7,"^6",19,"^7",12,"~:arglists",["~#list",["~$quote",["^N",[[],["~$s1"],["^P","~$s2"],["^P","^Q","~$&","~$sets"]]]]],"^8","Return a set that is the union of the input sets","~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[[],["^P"],["^P","^Q"]],"^M",["^N",[[],["^P"],["^P","^Q"],["^P","^Q","~$&","^R"]]],"~:arglists-meta",["^N",[null,null,null,null]]]],"^B","~$clojure.set/union","^3","clojure/set.cljs","^7",12,"^S",["^ ","^T",true,"^U",2,"^V",2,"^W",[[],["^P"],["^P","^Q"]],"^M",["^N",[[],["^P"],["^P","^Q"],["^P","^Q","~$&","^R"]]],"^X",["^N",[null,null,null,null]]],"^W",[[],["^P"],["^P","^Q"]],"~:protocol-impl",null,"^U",2,"^X",["^N",[null,null,null,null]],"^5",1,"^T",true,"~:methods",[["^ ","^U",0,"^T",false,"~:tag","~$cljs.core/ISet"],["^ ","^U",1,"^T",false],["^ ","^U",2,"^T",false,"^10",["^A",[null,"~$any"]]],["^ ","^U",2,"^T",true,"^10",["^A",[null,"^12"]]]],"^4",19,"^6",19,"^V",2,"~:fn-var",true,"^M",["^N",[[],["^P"],["^P","^Q"],["^P","^Q","~$&","^R"]]],"^8","Return a set that is the union of the input sets"],"~$map-invert",["^ ","^L",null,"^2",["^ ","^3","clojure/set.cljs","^4",97,"^5",7,"^6",97,"^7",17,"^M",["^N",["^O",["^N",[["~$m"]]]]],"^8","Returns the map with the vals mapped to the keys."],"^B","~$clojure.set/map-invert","^3","clojure/set.cljs","^7",17,"^W",["^N",[["~$m"]]],"^Z",null,"^X",["^N",[null,null]],"^5",1,"^T",false,"^4",97,"~:ret-tag",["^A",[null,"^12"]],"^6",97,"^V",1,"^13",true,"^M",["^N",["^O",["^N",[["~$m"]]]]],"^8","Returns the map with the vals mapped to the keys."],"~$join",["^ ","^L",null,"^2",["^ ","^3","clojure/set.cljs","^4",101,"^5",7,"^6",101,"^7",11,"^M",["^N",["^O",["^N",[["~$xrel","~$yrel"],["^18","^19","~$km"]]]]],"^8","When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.","^S",["^ ","^T",false,"^U",3,"^V",3,"^W",[["^18","^19"],["^18","^19","^1:"]],"^M",["^N",[["^18","^19"],["^18","^19","^1:"]]],"^X",["^N",[null,null]]]],"^B","~$clojure.set/join","^3","clojure/set.cljs","^7",11,"^S",["^ ","^T",false,"^U",3,"^V",3,"^W",[["^18","^19"],["^18","^19","^1:"]],"^M",["^N",[["^18","^19"],["^18","^19","^1:"]]],"^X",["^N",[null,null]]],"^W",[["^18","^19"],["^18","^19","^1:"]],"^Z",null,"^U",3,"^X",["^N",[null,null]],"^5",1,"^T",false,"^[",[["^ ","^U",2,"^T",false,"^10",["^A",[null,"^12","^11"]]],["^ ","^U",3,"^T",false,"^10",["^A",[null,"^12"]]]],"^4",101,"^6",101,"^V",3,"^13",true,"^M",["^N",[["^18","^19"],["^18","^19","^1:"]]],"^8","When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys."],"~$select",["^ ","^L",null,"^2",["^ ","^3","clojure/set.cljs","^4",61,"^5",7,"^6",61,"^7",13,"^M",["^N",["^O",["^N",[["~$pred","~$xset"]]]]],"^8","Returns a set of the elements for which pred is true"],"^B","~$clojure.set/select","^3","clojure/set.cljs","^7",13,"^W",["^N",[["^1=","^1>"]]],"^Z",null,"^X",["^N",[null,null]],"^5",1,"^T",false,"^4",61,"^16",["^A",[null,"^12"]],"^6",61,"^V",2,"^13",true,"^M",["^N",["^O",["^N",[["^1=","^1>"]]]]],"^8","Returns a set of the elements for which pred is true"],"~$intersection",["^ ","^L",null,"^2",["^ ","^3","clojure/set.cljs","^4",31,"^5",7,"^6",31,"^7",19,"^M",["^N",["^O",["^N",[["^P"],["^P","^Q"],["^P","^Q","~$&","^R"]]]]],"^8","Return a set that is the intersection of the input sets","^S",["^ ","^T",true,"^U",2,"^V",2,"^W",[["^P"],["^P","^Q"]],"^M",["^N",[["^P"],["^P","^Q"],["^P","^Q","~$&","^R"]]],"^X",["^N",[null,null,null]]]],"^B","~$clojure.set/intersection","^3","clojure/set.cljs","^7",19,"^S",["^ ","^T",true,"^U",2,"^V",2,"^W",[["^P"],["^P","^Q"]],"^M",["^N",[["^P"],["^P","^Q"],["^P","^Q","~$&","^R"]]],"^X",["^N",[null,null,null]]],"^W",[["^P"],["^P","^Q"]],"^Z",null,"^U",2,"^X",["^N",[null,null,null]],"^5",1,"^T",true,"^[",[["^ ","^U",1,"^T",false],["^ ","^U",2,"^T",false,"^10",["^A",[null,"^12"]]],["^ ","^U",2,"^T",true,"^10",["^A",[null,"^12"]]]],"^4",31,"^6",31,"^V",2,"^13",true,"^M",["^N",[["^P"],["^P","^Q"],["^P","^Q","~$&","^R"]]],"^8","Return a set that is the intersection of the input sets"],"~$superset?",["^ ","^L",null,"^2",["^ ","^3","clojure/set.cljs","^4",137,"^5",7,"^6",137,"^7",16,"^M",["^N",["^O",["^N",[["~$set1","~$set2"]]]]],"^8","Is set1 a superset of set2?"],"^B","~$clojure.set/superset?","^3","clojure/set.cljs","^7",16,"^W",["^N",[["^1C","^1D"]]],"^Z",null,"^X",["^N",[null,null]],"^5",1,"^T",false,"^4",137,"^16","~$boolean","^6",137,"^V",2,"^13",true,"^M",["^N",["^O",["^N",[["^1C","^1D"]]]]],"^8","Is set1 a superset of set2?"],"~$index",["^ ","^L",null,"^2",["^ ","^3","clojure/set.cljs","^4",87,"^5",7,"^6",87,"^7",12,"^M",["^N",["^O",["^N",[["^18","~$ks"]]]]],"^8","Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."],"^B","~$clojure.set/index","^3","clojure/set.cljs","^7",12,"^W",["^N",[["^18","^1H"]]],"^Z",null,"^X",["^N",[null,null]],"^5",1,"^T",false,"^4",87,"^16",["^A",[null,"^12"]],"^6",87,"^V",2,"^13",true,"^M",["^N",["^O",["^N",[["^18","^1H"]]]]],"^8","Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."],"~$bubble-max-key",["^ ","^L",null,"^2",["^ ","^3","clojure/set.cljs","^4",13,"^5",8,"^6",13,"^7",22,"~:private",true,"^M",["^N",["^O",["^N",[["~$k","~$coll"]]]]]],"^1K",true,"^B","~$clojure.set/bubble-max-key","^3","clojure/set.cljs","^7",22,"^W",["^N",[["~$k","^1L"]]],"^Z",null,"^X",["^N",[null,null]],"^5",1,"^T",false,"^4",13,"^16","~$clj","^6",13,"^V",2,"^13",true,"^M",["^N",["^O",["^N",[["~$k","^1L"]]]]]],"~$subset?",["^ ","^L",null,"^2",["^ ","^3","clojure/set.cljs","^4",131,"^5",7,"^6",131,"^7",14,"^M",["^N",["^O",["^N",[["^1C","^1D"]]]]],"^8","Is set1 a subset of set2?"],"^B","~$clojure.set/subset?","^3","clojure/set.cljs","^7",14,"^W",["^N",[["^1C","^1D"]]],"^Z",null,"^X",["^N",[null,null]],"^5",1,"^T",false,"^4",131,"^16","^1F","^6",131,"^V",2,"^13",true,"^M",["^N",["^O",["^N",[["^1C","^1D"]]]]],"^8","Is set1 a subset of set2?"],"~$rename",["^ ","^L",null,"^2",["^ ","^3","clojure/set.cljs","^4",82,"^5",7,"^6",82,"^7",13,"^M",["^N",["^O",["^N",[["^18","~$kmap"]]]]],"^8","Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"],"^B","~$clojure.set/rename","^3","clojure/set.cljs","^7",13,"^W",["^N",[["^18","^1R"]]],"^Z",null,"^X",["^N",[null,null]],"^5",1,"^T",false,"^4",82,"^16",["^A",["^1N","^12","^11","~$cljs.core/MetaFn","~$clj-nil"]],"^6",82,"^V",2,"^13",true,"^M",["^N",["^O",["^N",[["^18","^1R"]]]]],"^8","Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"],"~$rename-keys",["^ ","^L",null,"^2",["^ ","^3","clojure/set.cljs","^4",72,"^5",7,"^6",72,"^7",18,"^M",["^N",["^O",["^N",[["~$map","^1R"]]]]],"^8","Returns the map with the keys in kmap renamed to the vals in kmap"],"^B","~$clojure.set/rename-keys","^3","clojure/set.cljs","^7",18,"^W",["^N",[["^1W","^1R"]]],"^Z",null,"^X",["^N",[null,null]],"^5",1,"^T",false,"^4",72,"^16",["^A",[null,"^12"]],"^6",72,"^V",2,"^13",true,"^M",["^N",["^O",["^N",[["^1W","^1R"]]]]],"^8","Returns the map with the keys in kmap renamed to the vals in kmap"],"~$project",["^ ","^L",null,"^2",["^ ","^3","clojure/set.cljs","^4",67,"^5",7,"^6",67,"^7",14,"^M",["^N",["^O",["^N",[["^18","^1H"]]]]],"^8","Returns a rel of the elements of xrel with only the keys in ks"],"^B","~$clojure.set/project","^3","clojure/set.cljs","^7",14,"^W",["^N",[["^18","^1H"]]],"^Z",null,"^X",["^N",[null,null]],"^5",1,"^T",false,"^4",67,"^16",["^A",["^1N","^12","^11","^1T","^1U"]],"^6",67,"^V",2,"^13",true,"^M",["^N",["^O",["^N",[["^18","^1H"]]]]],"^8","Returns a rel of the elements of xrel with only the keys in ks"],"~$difference",["^ ","^L",null,"^2",["^ ","^3","clojure/set.cljs","^4",46,"^5",7,"^6",46,"^7",17,"^M",["^N",["^O",["^N",[["^P"],["^P","^Q"],["^P","^Q","~$&","^R"]]]]],"^8","Return a set that is the first set without elements of the remaining sets","^S",["^ ","^T",true,"^U",2,"^V",2,"^W",[["^P"],["^P","^Q"]],"^M",["^N",[["^P"],["^P","^Q"],["^P","^Q","~$&","^R"]]],"^X",["^N",[null,null,null]]]],"^B","~$clojure.set/difference","^3","clojure/set.cljs","^7",17,"^S",["^ ","^T",true,"^U",2,"^V",2,"^W",[["^P"],["^P","^Q"]],"^M",["^N",[["^P"],["^P","^Q"],["^P","^Q","~$&","^R"]]],"^X",["^N",[null,null,null]]],"^W",[["^P"],["^P","^Q"]],"^Z",null,"^U",2,"^X",["^N",[null,null,null]],"^5",1,"^T",true,"^[",[["^ ","^U",1,"^T",false],["^ ","^U",2,"^T",false,"^10",["^A",[null,"^12"]]],["^ ","^U",2,"^T",true,"^10",["^A",[null,"^12"]]]],"^4",46,"^6",46,"^V",2,"^13",true,"^M",["^N",[["^P"],["^P","^Q"],["^P","^Q","~$&","^R"]]],"^8","Return a set that is the first set without elements of the remaining sets"]],"~:require-macros",["^ ","^>","^>"],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^F","^>"]]