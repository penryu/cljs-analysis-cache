["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/set.cljs","~:line",11,"~:column",8,"~:end-line",11,"~:end-column",19,"~:doc","Set operations such as union/intersection.","~:author","Rich Hickey"],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.core","~$cljs.core"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$clojure.set","~:reader-aliases",["^ "],"~:imports",null,"~:requires",["^ ","^>","^>","~$goog","^G"],"~:seen",["^A",[]],"~:shadow/js-access-global",["^A",["Error"]],"~:uses",null,"~:defs",["^ ","~$union",["^ ","~:protocol-inline",null,"^2",["^ ","^3","clojure/set.cljs","^4",19,"^5",7,"^6",19,"^7",12,"~:arglists",["~#list",["~$quote",["^O",[[],["~$s1"],["^Q","~$s2"],["^Q","^R","~$&","~$sets"]]]]],"^8","Return a set that is the union of the input sets","~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[[],["^Q"],["^Q","^R"]],"^N",["^O",[[],["^Q"],["^Q","^R"],["^Q","^R","~$&","^S"]]],"~:arglists-meta",["^O",[null,null,null,null]]]],"^B","~$clojure.set/union","^3","clojure/set.cljs","^7",12,"^T",["^ ","^U",true,"^V",2,"^W",2,"^X",[[],["^Q"],["^Q","^R"]],"^N",["^O",[[],["^Q"],["^Q","^R"],["^Q","^R","~$&","^S"]]],"^Y",["^O",[null,null,null,null]]],"^X",[[],["^Q"],["^Q","^R"]],"~:protocol-impl",null,"^V",2,"^Y",["^O",[null,null,null,null]],"^5",1,"^U",true,"~:methods",[["^ ","^V",0,"^U",false,"~:tag","~$cljs.core/ISet"],["^ ","^V",1,"^U",false],["^ ","^V",2,"^U",false,"^11",["^A",[null,"~$any"]]],["^ ","^V",2,"^U",true,"^11",["^A",[null,"^13"]]]],"^4",19,"^6",19,"^W",2,"~:fn-var",true,"^N",["^O",[[],["^Q"],["^Q","^R"],["^Q","^R","~$&","^S"]]],"^8","Return a set that is the union of the input sets"],"~$map-invert",["^ ","^M",null,"^2",["^ ","^3","clojure/set.cljs","^4",97,"^5",7,"^6",97,"^7",17,"^N",["^O",["^P",["^O",[["~$m"]]]]],"^8","Returns the map with the vals mapped to the keys."],"^B","~$clojure.set/map-invert","^3","clojure/set.cljs","^7",17,"^X",["^O",[["~$m"]]],"^[",null,"^Y",["^O",[null,null]],"^5",1,"^U",false,"^4",97,"~:ret-tag","~$clj","^6",97,"^W",1,"^14",true,"^N",["^O",["^P",["^O",[["~$m"]]]]],"^8","Returns the map with the vals mapped to the keys."],"~$join",["^ ","^M",null,"^2",["^ ","^3","clojure/set.cljs","^4",105,"^5",7,"^6",105,"^7",11,"^N",["^O",["^P",["^O",[["~$xrel","~$yrel"],["^1:","^1;","~$km"]]]]],"^8","When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.","^T",["^ ","^U",false,"^V",3,"^W",3,"^X",[["^1:","^1;"],["^1:","^1;","^1<"]],"^N",["^O",[["^1:","^1;"],["^1:","^1;","^1<"]]],"^Y",["^O",[null,null]]]],"^B","~$clojure.set/join","^3","clojure/set.cljs","^7",11,"^T",["^ ","^U",false,"^V",3,"^W",3,"^X",[["^1:","^1;"],["^1:","^1;","^1<"]],"^N",["^O",[["^1:","^1;"],["^1:","^1;","^1<"]]],"^Y",["^O",[null,null]]],"^X",[["^1:","^1;"],["^1:","^1;","^1<"]],"^[",null,"^V",3,"^Y",["^O",[null,null]],"^5",1,"^U",false,"^10",[["^ ","^V",2,"^U",false,"^11",["^A",[null,"^13","^12"]]],["^ ","^V",3,"^U",false,"^11",["^A",[null,"^13"]]]],"^4",105,"^6",105,"^W",3,"^14",true,"^N",["^O",[["^1:","^1;"],["^1:","^1;","^1<"]]],"^8","When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys."],"~$select",["^ ","^M",null,"^2",["^ ","^3","clojure/set.cljs","^4",61,"^5",7,"^6",61,"^7",13,"^N",["^O",["^P",["^O",[["~$pred","~$xset"]]]]],"^8","Returns a set of the elements for which pred is true"],"^B","~$clojure.set/select","^3","clojure/set.cljs","^7",13,"^X",["^O",[["^1?","^1@"]]],"^[",null,"^Y",["^O",[null,null]],"^5",1,"^U",false,"^4",61,"^17",["^A",[null,"^13"]],"^6",61,"^W",2,"^14",true,"^N",["^O",["^P",["^O",[["^1?","^1@"]]]]],"^8","Returns a set of the elements for which pred is true"],"~$intersection",["^ ","^M",null,"^2",["^ ","^3","clojure/set.cljs","^4",31,"^5",7,"^6",31,"^7",19,"^N",["^O",["^P",["^O",[["^Q"],["^Q","^R"],["^Q","^R","~$&","^S"]]]]],"^8","Return a set that is the intersection of the input sets","^T",["^ ","^U",true,"^V",2,"^W",2,"^X",[["^Q"],["^Q","^R"]],"^N",["^O",[["^Q"],["^Q","^R"],["^Q","^R","~$&","^S"]]],"^Y",["^O",[null,null,null]]]],"^B","~$clojure.set/intersection","^3","clojure/set.cljs","^7",19,"^T",["^ ","^U",true,"^V",2,"^W",2,"^X",[["^Q"],["^Q","^R"]],"^N",["^O",[["^Q"],["^Q","^R"],["^Q","^R","~$&","^S"]]],"^Y",["^O",[null,null,null]]],"^X",[["^Q"],["^Q","^R"]],"^[",null,"^V",2,"^Y",["^O",[null,null,null]],"^5",1,"^U",true,"^10",[["^ ","^V",1,"^U",false],["^ ","^V",2,"^U",false,"^11",["^A",[null,"^13"]]],["^ ","^V",2,"^U",true,"^11",["^A",[null,"^13"]]]],"^4",31,"^6",31,"^W",2,"^14",true,"^N",["^O",[["^Q"],["^Q","^R"],["^Q","^R","~$&","^S"]]],"^8","Return a set that is the intersection of the input sets"],"~$superset?",["^ ","^M",null,"^2",["^ ","^3","clojure/set.cljs","^4",141,"^5",7,"^6",141,"^7",16,"^N",["^O",["^P",["^O",[["~$set1","~$set2"]]]]],"^8","Is set1 a superset of set2?"],"^B","~$clojure.set/superset?","^3","clojure/set.cljs","^7",16,"^X",["^O",[["^1E","^1F"]]],"^[",null,"^Y",["^O",[null,null]],"^5",1,"^U",false,"^4",141,"^17","~$boolean","^6",141,"^W",2,"^14",true,"^N",["^O",["^P",["^O",[["^1E","^1F"]]]]],"^8","Is set1 a superset of set2?"],"~$index",["^ ","^M",null,"^2",["^ ","^3","clojure/set.cljs","^4",87,"^5",7,"^6",87,"^7",12,"^N",["^O",["^P",["^O",[["^1:","~$ks"]]]]],"^8","Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."],"^B","~$clojure.set/index","^3","clojure/set.cljs","^7",12,"^X",["^O",[["^1:","^1J"]]],"^[",null,"^Y",["^O",[null,null]],"^5",1,"^U",false,"^4",87,"^17",["^A",[null,"^13"]],"^6",87,"^W",2,"^14",true,"^N",["^O",["^P",["^O",[["^1:","^1J"]]]]],"^8","Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."],"~$bubble-max-key",["^ ","^M",null,"^2",["^ ","^3","clojure/set.cljs","^4",13,"^5",8,"^6",13,"^7",22,"~:private",true,"^N",["^O",["^P",["^O",[["~$k","~$coll"]]]]]],"^1M",true,"^B","~$clojure.set/bubble-max-key","^3","clojure/set.cljs","^7",22,"^X",["^O",[["~$k","^1N"]]],"^[",null,"^Y",["^O",[null,null]],"^5",1,"^U",false,"^4",13,"^17","^18","^6",13,"^W",2,"^14",true,"^N",["^O",["^P",["^O",[["~$k","^1N"]]]]]],"~$subset?",["^ ","^M",null,"^2",["^ ","^3","clojure/set.cljs","^4",135,"^5",7,"^6",135,"^7",14,"^N",["^O",["^P",["^O",[["^1E","^1F"]]]]],"^8","Is set1 a subset of set2?"],"^B","~$clojure.set/subset?","^3","clojure/set.cljs","^7",14,"^X",["^O",[["^1E","^1F"]]],"^[",null,"^Y",["^O",[null,null]],"^5",1,"^U",false,"^4",135,"^17","^1H","^6",135,"^W",2,"^14",true,"^N",["^O",["^P",["^O",[["^1E","^1F"]]]]],"^8","Is set1 a subset of set2?"],"~$rename",["^ ","^M",null,"^2",["^ ","^3","clojure/set.cljs","^4",82,"^5",7,"^6",82,"^7",13,"^N",["^O",["^P",["^O",[["^1:","~$kmap"]]]]],"^8","Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"],"^B","~$clojure.set/rename","^3","clojure/set.cljs","^7",13,"^X",["^O",[["^1:","^1S"]]],"^[",null,"^Y",["^O",[null,null]],"^5",1,"^U",false,"^4",82,"^17",["^A",["^18","^13","^12","~$cljs.core/MetaFn","~$clj-nil"]],"^6",82,"^W",2,"^14",true,"^N",["^O",["^P",["^O",[["^1:","^1S"]]]]],"^8","Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"],"~$rename-keys",["^ ","^M",null,"^2",["^ ","^3","clojure/set.cljs","^4",72,"^5",7,"^6",72,"^7",18,"^N",["^O",["^P",["^O",[["~$map","^1S"]]]]],"^8","Returns the map with the keys in kmap renamed to the vals in kmap"],"^B","~$clojure.set/rename-keys","^3","clojure/set.cljs","^7",18,"^X",["^O",[["^1X","^1S"]]],"^[",null,"^Y",["^O",[null,null]],"^5",1,"^U",false,"^4",72,"^17",["^A",[null,"^13"]],"^6",72,"^W",2,"^14",true,"^N",["^O",["^P",["^O",[["^1X","^1S"]]]]],"^8","Returns the map with the keys in kmap renamed to the vals in kmap"],"~$project",["^ ","^M",null,"^2",["^ ","^3","clojure/set.cljs","^4",67,"^5",7,"^6",67,"^7",14,"^N",["^O",["^P",["^O",[["^1:","^1J"]]]]],"^8","Returns a rel of the elements of xrel with only the keys in ks"],"^B","~$clojure.set/project","^3","clojure/set.cljs","^7",14,"^X",["^O",[["^1:","^1J"]]],"^[",null,"^Y",["^O",[null,null]],"^5",1,"^U",false,"^4",67,"^17",["^A",["^18","^13","^12","^1U","^1V"]],"^6",67,"^W",2,"^14",true,"^N",["^O",["^P",["^O",[["^1:","^1J"]]]]],"^8","Returns a rel of the elements of xrel with only the keys in ks"],"~$difference",["^ ","^M",null,"^2",["^ ","^3","clojure/set.cljs","^4",46,"^5",7,"^6",46,"^7",17,"^N",["^O",["^P",["^O",[["^Q"],["^Q","^R"],["^Q","^R","~$&","^S"]]]]],"^8","Return a set that is the first set without elements of the remaining sets","^T",["^ ","^U",true,"^V",2,"^W",2,"^X",[["^Q"],["^Q","^R"]],"^N",["^O",[["^Q"],["^Q","^R"],["^Q","^R","~$&","^S"]]],"^Y",["^O",[null,null,null]]]],"^B","~$clojure.set/difference","^3","clojure/set.cljs","^7",17,"^T",["^ ","^U",true,"^V",2,"^W",2,"^X",[["^Q"],["^Q","^R"]],"^N",["^O",[["^Q"],["^Q","^R"],["^Q","^R","~$&","^S"]]],"^Y",["^O",[null,null,null]]],"^X",[["^Q"],["^Q","^R"]],"^[",null,"^V",2,"^Y",["^O",[null,null,null]],"^5",1,"^U",true,"^10",[["^ ","^V",1,"^U",false],["^ ","^V",2,"^U",false,"^11",["^A",[null,"^13"]]],["^ ","^V",2,"^U",true,"^11",["^A",[null,"^13"]]]],"^4",46,"^6",46,"^W",2,"^14",true,"^N",["^O",[["^Q"],["^Q","^R"],["^Q","^R","~$&","^S"]]],"^8","Return a set that is the first set without elements of the remaining sets"]],"~:require-macros",["^ ","^>","^>"],"~:flags",["^ "],"~:js-deps",[],"~:deps",["^G","^>"]]