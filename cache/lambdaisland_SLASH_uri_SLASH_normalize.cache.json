["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","lambdaisland/uri/normalize.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",31],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.core","~$cljs.core"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$lambdaisland.uri.normalize","~:imports",null,"~:requires",["^ ","~$clojure.string","^D","~$str","^D","~$lambdaisland.uri.platform","^F","^<","^<","~$goog","^G"],"~:seen",["^?",["~:require"]],"~:shadow/js-access-global",["^?",["Error"]],"~:uses",["^ ","~$byte-seq->string","^F","~$string->byte-seq","^F","~$byte->hex","^F","~$hex->byte","^F","~$char-code-at","^F","~$str-len","^F"],"~:defs",["^ ","~$percent-encode",["^ ","~:protocol-inline",null,"^2",["^ ","^3","lambdaisland/uri/normalize.cljc","^4",59,"^5",7,"^6",59,"^7",21,"~:arglists",["~#list",["~$quote",["^V",[["~$component"],["^X","~$type"]]]]],"~:doc","Convert characters in their percent encoded form. e.g.\n   `(percent_encode \"a\") #_=> \"%61\"`. When given a second argument, then\n   only characters of the given character class are encoded,\n   see `character-class`.\n\n   Characters are encoded as UTF-8. To use a different encoding. re-bind\n   `*character-encoding*`","~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["^X"],["^X","^Y"]],"^U",["^V",[["^X"],["^X","^Y"]]],"~:arglists-meta",["^V",[null,null]]]],"^@","~$lambdaisland.uri.normalize/percent-encode","^3","lambdaisland/uri/normalize.cljc","^7",21,"^[",["^ ","^10",false,"^11",2,"^12",2,"^13",[["^X"],["^X","^Y"]],"^U",["^V",[["^X"],["^X","^Y"]]],"^14",["^V",[null,null]]],"^13",[["^X"],["^X","^Y"]],"~:protocol-impl",null,"^11",2,"^14",["^V",[null,null]],"^5",1,"^10",false,"~:methods",[["^ ","^11",1,"^10",false,"~:tag","~$any"],["^ ","^11",2,"^10",false,"^18","^19"]],"^4",59,"^6",59,"^12",2,"~:fn-var",true,"^U",["^V",[["^X"],["^X","^Y"]]],"^Z","Convert characters in their percent encoded form. e.g.\n   `(percent_encode \"a\") #_=> \"%61\"`. When given a second argument, then\n   only characters of the given character class are encoded,\n   see `character-class`.\n\n   Characters are encoded as UTF-8. To use a different encoding. re-bind\n   `*character-encoding*`"],"~$normalize-query",["^ ","^T",null,"^2",["^ ","^3","lambdaisland/uri/normalize.cljc","^4",119,"^5",7,"^6",119,"^7",22,"^U",["^V",["^W",["^V",[["~$s"]]]]],"^Z","Normalize the query section of a URI\n\n  - sub-delimiters that are not percent encoded are left unencoded\n  - sub-delimiters and other reserved characters are always percent encoded\n  - non-reserved characters that are percent-encoded are decoded\n  "],"^@","~$lambdaisland.uri.normalize/normalize-query","^3","lambdaisland/uri/normalize.cljc","^7",22,"^13",["^V",[["~$s"]]],"^16",null,"^14",["^V",[null,null]],"^5",1,"^10",false,"^4",119,"~:ret-tag",["^?",["^19","~$clj-nil"]],"^6",119,"^12",1,"^1:",true,"^U",["^V",["^W",["^V",[["~$s"]]]]],"^Z","Normalize the query section of a URI\n\n  - sub-delimiters that are not percent encoded are left unencoded\n  - sub-delimiters and other reserved characters are always percent encoded\n  - non-reserved characters that are percent-encoded are decoded\n  "],"~$normalize",["^ ","^T",null,"^2",["^ ","^3","lambdaisland/uri/normalize.cljc","^4",152,"^5",7,"^6",152,"^7",16,"^U",["^V",["^W",["^V",[["~$uri"]]]]],"^Z","Normalize a lambdaisland.uri.URI. Currently normalizes (percent-encodes) the\n  path, query, and fragment."],"^@","~$lambdaisland.uri.normalize/normalize","^3","lambdaisland/uri/normalize.cljc","^7",16,"^13",["^V",[["^1@"]]],"^16",null,"^14",["^V",[null,null]],"^5",1,"^10",false,"^4",152,"^1=",["^?",["~$clj","^19"]],"^6",152,"^12",1,"^1:",true,"^U",["^V",["^W",["^V",[["^1@"]]]]],"^Z","Normalize a lambdaisland.uri.URI. Currently normalizes (percent-encodes) the\n  path, query, and fragment."],"~$normalize-path",["^ ","^T",null,"^2",["^ ","^3","lambdaisland/uri/normalize.cljc","^4",91,"^5",7,"^6",91,"^7",21,"^U",["^V",["^W",["^V",[["~$path"]]]]]],"^@","~$lambdaisland.uri.normalize/normalize-path","^3","lambdaisland/uri/normalize.cljc","^7",21,"^13",["^V",[["^1D"]]],"^16",null,"^14",["^V",[null,null]],"^5",1,"^10",false,"^4",91,"^1=",["^?",["^19","^1>"]],"^6",91,"^12",1,"^1:",true,"^U",["^V",["^W",["^V",[["^1D"]]]]]],"~$char-seq",["^ ","^T",null,"^2",["^ ","^3","lambdaisland/uri/normalize.cljc","^4",46,"^5",7,"^6",46,"^7",15,"^U",["^V",["^W",["^V",[["^E"],["^E","~$offset"]]]]],"^Z","Return a seq of the characters in a string, making sure not to split up\n  UCS-2 (or is it UTF-16?) surrogate pairs. Because JavaScript. And Java.","^[",["^ ","^10",false,"^11",2,"^12",2,"^13",[["^E"],["^E","^1G"]],"^U",["^V",[["^E"],["^E","^1G"]]],"^14",["^V",[null,null]]]],"^@","~$lambdaisland.uri.normalize/char-seq","^3","lambdaisland/uri/normalize.cljc","^7",15,"^[",["^ ","^10",false,"^11",2,"^12",2,"^13",[["^E"],["^E","^1G"]],"^U",["^V",[["^E"],["^E","^1G"]]],"^14",["^V",[null,null]]],"^13",[["^E"],["^E","^1G"]],"^16",null,"^11",2,"^14",["^V",[null,null]],"^5",1,"^10",false,"^17",[["^ ","^11",1,"^10",false,"^18","^19"],["^ ","^11",2,"^10",false,"^18","^1B"]],"^4",46,"^6",46,"^12",2,"^1:",true,"^U",["^V",[["^E"],["^E","^1G"]]],"^Z","Return a seq of the characters in a string, making sure not to split up\n  UCS-2 (or is it UTF-16?) surrogate pairs. Because JavaScript. And Java."],"~$character-classes",["^ ","^2",["^ ","^3","lambdaisland/uri/normalize.cljc","^4",15,"^5",3,"^6",15,"^7",20,"^Z","Which characters should be percent-encoded depends on which section\n    of the URI is being normalized. This map contains regexes that for each\n    case match the characters that need encoding."],"^@","~$lambdaisland.uri.normalize/character-classes","^3","lambdaisland/uri/normalize.cljc","^7",20,"^5",1,"^4",10,"^6",15,"^18","~$cljs.core/IMap","^Z","Which characters should be percent-encoded depends on which section\n    of the URI is being normalized. This map contains regexes that for each\n    case match the characters that need encoding."],"~$normalize-fragment",["^ ","^T",null,"^2",["^ ","^3","lambdaisland/uri/normalize.cljc","^4",95,"^5",7,"^6",95,"^7",25,"^U",["^V",["^W",["^V",[["~$fragment"]]]]]],"^@","~$lambdaisland.uri.normalize/normalize-fragment","^3","lambdaisland/uri/normalize.cljc","^7",25,"^13",["^V",[["^1M"]]],"^16",null,"^14",["^V",[null,null]],"^5",1,"^10",false,"^4",95,"^1=",["^?",["^19","^1>"]],"^6",95,"^12",1,"^1:",true,"^U",["^V",["^W",["^V",[["^1M"]]]]]],"~$high-surrogate?",["^ ","^T",null,"^2",["^ ","^3","lambdaisland/uri/normalize.cljc","^4",43,"^5",7,"^6",43,"^7",22,"^U",["^V",["^W",["^V",[["~$char-code"]]]]]],"^@","~$lambdaisland.uri.normalize/high-surrogate?","^3","lambdaisland/uri/normalize.cljc","^7",22,"^13",["^V",[["^1P"]]],"^16",null,"^14",["^V",[null,null]],"^5",1,"^10",false,"^4",43,"^1=","~$boolean","^6",43,"^12",1,"^1:",true,"^U",["^V",["^W",["^V",[["^1P"]]]]]],"~$sub-delims",["^ ","^2",["^ ","^3","lambdaisland/uri/normalize.cljc","^4",104,"^5",6,"^6",104,"^7",16],"^@","~$lambdaisland.uri.normalize/sub-delims","^3","lambdaisland/uri/normalize.cljc","^7",16,"^5",1,"^4",104,"^6",104,"^18","~$cljs.core/ISet","^Z","RFC3986 section 2.2\n\n  The purpose of reserved characters is to provide a set of delimiting\n  characters that are distinguishable from other data within a URI.\n  URIs that differ in the replacement of a reserved character with its\n  corresponding percent-encoded octet are not equivalent.  Percent-\n  encoding a reserved character, or decoding a percent-encoded octet\n  that corresponds to a reserved character, will change how the URI is\n  interpreted by most applications.  Thus, characters in the reserved\n  set are protected from normalization and are therefore safe to be\n  used by scheme-specific and producer-specific algorithms for\n  delimiting data subcomponents within a URI. "],"~$percent-decode",["^ ","^T",null,"^2",["^ ","^3","lambdaisland/uri/normalize.cljc","^4",78,"^5",7,"^6",78,"^7",21,"^U",["^V",["^W",["^V",[["~$s"]]]]],"^Z","The inverse of `percent-encode`, convert any %XX sequences in a string to\n   characters. Byte sequences are interpreted as UTF-8. To use a different\n   encoding. re-bind `*character-encoding*`"],"^@","~$lambdaisland.uri.normalize/percent-decode","^3","lambdaisland/uri/normalize.cljc","^7",21,"^13",["^V",[["~$s"]]],"^16",null,"^14",["^V",[null,null]],"^5",1,"^10",false,"^4",78,"^1=",["^?",["~$string","^1>"]],"^6",78,"^12",1,"^1:",true,"^U",["^V",["^W",["^V",[["~$s"]]]]],"^Z","The inverse of `percent-encode`, convert any %XX sequences in a string to\n   characters. Byte sequences are interpreted as UTF-8. To use a different\n   encoding. re-bind `*character-encoding*`"],"~$hex-code-point?",["^ ","^T",null,"^2",["^ ","^3","lambdaisland/uri/normalize.cljc","^4",99,"^5",7,"^6",99,"^7",22,"^U",["^V",["^W",["^V",[["~$cp"]]]]]],"^@","~$lambdaisland.uri.normalize/hex-code-point?","^3","lambdaisland/uri/normalize.cljc","^7",22,"^13",["^V",[["^1Z"]]],"^16",null,"^14",["^V",[null,null]],"^5",1,"^10",false,"^4",99,"^1=","^1R","^6",99,"^12",1,"^1:",true,"^U",["^V",["^W",["^V",[["^1Z"]]]]]]],"~:require-macros",["^ ","^<","^<"],"~:cljs.analyzer/constants",["^ ","^H",["^?",["~:path","~:else","~:fragment","~:authority","~:pchar","~:unreserved","~:sub-delims","~:gen-delims","~:host","~:reserved","~:alpha","~:query","~:scheme","~:digit"]],"~:order",["^22","^24","^25","^26","^27","^28","^29","^2:","^2;","^2<","^2=","^2>","^2?","^23"]],"~:flags",["^ ","^I",["^?",[]]],"~:js-deps",["^ "],"~:deps",["^G","^<","^D","^F"]]