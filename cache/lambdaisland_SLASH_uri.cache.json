["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","lambdaisland/uri.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",21],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.core","~$cljs.core"],"~:use-macros",null,"~:excludes",["~#set",["~$uri?"]],"~:name","~$lambdaisland.uri","~:reader-aliases",["^ "],"~:imports",null,"~:requires",["^ ","~$clojure.string","^F","~$str","^F","~$lambdaisland.uri.normalize","^H","~$normalize","^H","^<","^<","~$goog","^J"],"~:seen",["^?",["~:require"]],"~:shadow/js-access-global",["^?",["Error"]],"~:uses",null,"~:defs",["^ ","~$uri",["^ ","~:protocol-inline",null,"^2",["^ ","^3","lambdaisland/uri.cljc","^4",63,"^5",7,"^6",63,"^7",10,"~:arglists",["~#list",["~$quote",["^S",[["~$uri-like"]]]]],"~:doc","Turn the given value into a lambdaisland.uri.URI record, if it isn't one\n  already. Supports String, java.net.URI, and other URI-like objects that return\n  a valid URI string with `str`."],"^A","~$lambdaisland.uri/uri","^3","lambdaisland/uri.cljc","^7",10,"~:method-params",["^S",[["^U"]]],"~:protocol-impl",null,"~:arglists-meta",["^S",[null,null]],"^5",1,"~:variadic?",false,"^4",63,"~:ret-tag","~$lambdaisland.uri/URI","^6",63,"~:max-fixed-arity",1,"~:fn-var",true,"^R",["^S",["^T",["^S",[["^U"]]]]],"^V","Turn the given value into a lambdaisland.uri.URI record, if it isn't one\n  already. Supports String, java.net.URI, and other URI-like objects that return\n  a valid URI string with `str`."],"~$relative?",["^ ","^Q",null,"^2",["^ ","^3","lambdaisland/uri.cljc","^4",251,"^5",7,"^6",251,"^7",16,"^R",["^S",["^T",["^S",[["^P"]]]]],"^V","Is the URI relative? Returns true if the URI does not have a scheme (protocol)."],"^A","~$lambdaisland.uri/relative?","^3","lambdaisland/uri.cljc","^7",16,"^X",["^S",[["^P"]]],"^Y",null,"^Z",["^S",[null,null]],"^5",1,"^[",false,"^4",251,"^10","~$boolean","^6",251,"^12",1,"^13",true,"^R",["^S",["^T",["^S",[["^P"]]]]],"^V","Is the URI relative? Returns true if the URI does not have a scheme (protocol)."],"~$map->URI",["^ ","^Q",null,"^2",["^ ","^3","lambdaisland/uri.cljc","^7",15,"^5",12,"~:internal-ctor",true,"~:factory","~:map","^4",31,"^6",31,"^R",["^S",["^T",["^S",[["~$G__11439"]]]]],"^V","Factory function for lambdaisland.uri/URI, taking a map of keywords to field values."],"^A","~$lambdaisland.uri/map->URI","^3","lambdaisland/uri.cljc","^7",15,"^X",["^S",[["^1;"]]],"^Y",null,"^Z",["^S",[null,null]],"^5",1,"^18",true,"^[",false,"^19","^1:","^4",31,"^10","^11","^6",31,"^12",1,"^13",true,"^R",["^S",["^T",["^S",[["^1;"]]]]],"^V","Factory function for lambdaisland.uri/URI, taking a map of keywords to field values."],"~$absolute?",["^ ","^2",["^ ","^3","lambdaisland/uri.cljc","^4",259,"^5",3,"^6",259,"^7",12,"^V","Is the URI absolute? Returns true if the URI has a scheme (protocol), and hence also an origin."],"^A","~$lambdaisland.uri/absolute?","^3","lambdaisland/uri.cljc","^7",12,"^5",1,"^4",256,"^6",259,"~:tag","~$function","^V","Is the URI absolute? Returns true if the URI has a scheme (protocol), and hence also an origin."],"~$join",["^ ","^Q",null,"^2",["^ ","^3","lambdaisland/uri.cljc","^4",123,"^5",7,"^6",123,"^7",11,"^R",["^S",["^T",["^S",[["~$&","~$uris"]]]]],"^V","Joins any number of URIs as per RFC3986. Arguments can be strings, they will\n  be coerced to URI records.","~:top-fn",["^ ","^[",true,"~:fixed-arity",0,"^12",0,"^X",[["^S",["^1B"]]],"^R",["^S",[["~$&","^1B"]]],"^Z",["^S",[null]]]],"^A","~$lambdaisland.uri/join","^3","lambdaisland/uri.cljc","^7",11,"^1C",["^ ","^[",true,"^1D",0,"^12",0,"^X",[["^S",["^1B"]]],"^R",["^S",[["~$&","^1B"]]],"^Z",["^S",[null]]],"^X",[["^S",["^1B"]]],"^Y",null,"^1D",0,"^Z",["^S",[null]],"^5",1,"^[",true,"~:methods",[["^ ","^1D",0,"^[",true,"^1?","~$any"]],"^4",123,"^10","^1G","^6",123,"^12",0,"^13",true,"^R",["^S",[["~$&","^1B"]]],"^V","Joins any number of URIs as per RFC3986. Arguments can be strings, they will\n  be coerced to URI records."],"~$remove-dot-segments",["^ ","^Q",null,"^2",["^ ","^3","lambdaisland/uri.cljc","^4",80,"^5",8,"^6",80,"^7",27,"~:private",true,"^R",["^S",["^T",["^S",[["~$path"]]]]],"^V","As per RFC 3986 section 5.2.4"],"^1I",true,"^A","~$lambdaisland.uri/remove-dot-segments","^3","lambdaisland/uri.cljc","^7",27,"^X",["^S",[["^1J"]]],"^Y",null,"^Z",["^S",[null,null]],"^5",1,"^[",false,"^4",80,"^10",["^?",["~$string","~$clj-nil"]],"^6",80,"^12",1,"^13",true,"^R",["^S",["^T",["^S",[["^1J"]]]]],"^V","As per RFC 3986 section 5.2.4"],"~$uri-str",["^ ","^Q",null,"^2",["^ ","^3","lambdaisland/uri.cljc","^4",20,"^5",7,"^6",20,"^7",14,"^R",["^S",["^T",["^S",[[["^ ","~:keys",["~$scheme","~$user","~$password","~$host","~$port","^1J","~$query","~$fragment"]]]]]]],"^V","Convert the URI instance back to a string"],"^A","~$lambdaisland.uri/uri-str","^3","lambdaisland/uri.cljc","^7",14,"^X",["^S",[["~$p__11419"]]],"^Y",null,"^Z",["^S",[null,null]],"^5",1,"^[",false,"^4",20,"^10","^1L","^6",20,"^12",1,"^13",true,"^R",["^S",["^T",["^S",[[["^ ","^1O",["^1P","^1Q","^1R","^1S","^1T","^1J","^1U","^1V"]]]]]]],"^V","Convert the URI instance back to a string"],"~$query-string->map",["^ ","^Q",null,"^2",["^ ","^3","lambdaisland/uri.cljc","^4",137,"^5",7,"^6",137,"^7",24,"^R",["^S",["^T",["^S",[["~$q"],["~$q",["^ ","^1O",["~$multikeys","~$keywordize?"],"~:or",["^ ","^1Z","~:duplicates","^1[",true]]]]]]],"^V","Parse a query string, consisting of key=value pairs, separated by \"&\". Takes\n  the following options:\n\n  - `:keywordize?` whether to turn return keys as keywords. Defaults to `true`.\n  - `:multikeys` how to handle the same key occuring multiple times, defaults to\n    `:duplicates`\n\n  The possible values for `:multikeys` are\n\n  - `:never` always return a single value for a key. The rightmost value\n    \"wins\"\n  - `:always` return a map with vectors as values, with successive\n    values of the same key in order\n  - `:duplicates` return a vector for keys that occur multiple times, or a\n    string otherwise","^1C",["^ ","^[",false,"^1D",2,"^12",2,"^X",[["~$q"],["~$q",["^ ","^1O",["^1Z","^1["],"^20",["^ ","^1Z","^21","^1[",true]]]],"^R",["^S",[["~$q"],["~$q",["^ ","^1O",["^1Z","^1["],"^20",["^ ","^1Z","^21","^1[",true]]]]],"^Z",["^S",[null,null]]]],"^A","~$lambdaisland.uri/query-string->map","^3","lambdaisland/uri.cljc","^7",24,"^1C",["^ ","^[",false,"^1D",2,"^12",2,"^X",[["~$q"],["~$q",["^ ","^1O",["^1Z","^1["],"^20",["^ ","^1Z","^21","^1[",true]]]],"^R",["^S",[["~$q"],["~$q",["^ ","^1O",["^1Z","^1["],"^20",["^ ","^1Z","^21","^1[",true]]]]],"^Z",["^S",[null,null]]],"^X",[["~$q"],["~$q",["^ ","^1O",["^1Z","^1["],"^20",["^ ","^1Z","^21","^1[",true]]]],"^Y",null,"^1D",2,"^Z",["^S",[null,null]],"^5",1,"^[",false,"^1F",[["^ ","^1D",1,"^[",false,"^1?","^1G"],["^ ","^1D",2,"^[",false,"^1?",["^?",[null,"^1G","^1M"]]]],"^4",137,"^6",137,"^12",2,"^13",true,"^R",["^S",[["~$q"],["~$q",["^ ","^1O",["^1Z","^1["],"^20",["^ ","^1Z","^21","^1[",true]]]]],"^V","Parse a query string, consisting of key=value pairs, separated by \"&\". Takes\n  the following options:\n\n  - `:keywordize?` whether to turn return keys as keywords. Defaults to `true`.\n  - `:multikeys` how to handle the same key occuring multiple times, defaults to\n    `:duplicates`\n\n  The possible values for `:multikeys` are\n\n  - `:never` always return a single value for a key. The rightmost value\n    \"wins\"\n  - `:always` return a map with vectors as values, with successive\n    values of the same key in order\n  - `:duplicates` return a vector for keys that occur multiple times, or a\n    string otherwise"],"~$map->query-string",["^ ","^Q",null,"^2",["^ ","^3","lambdaisland/uri.cljc","^4",213,"^5",7,"^6",213,"^7",24,"^R",["^S",["^T",["^S",[["~$m"]]]]],"^V","Convert a map into a query string, consisting of key=value pairs separated by\n  `&`. The result is percent-encoded so it is always safe to use. Keys can be\n  strings or keywords. If values are collections then this results in multiple\n  entries for the same key. `nil` values are ignored. Values are stringified."],"^A","~$lambdaisland.uri/map->query-string","^3","lambdaisland/uri.cljc","^7",24,"^X",["^S",[["~$m"]]],"^Y",null,"^Z",["^S",[null,null]],"^5",1,"^[",false,"^4",213,"^10",["^?",["^1G","^1M"]],"^6",213,"^12",1,"^13",true,"^R",["^S",["^T",["^S",[["~$m"]]]]],"^V","Convert a map into a query string, consisting of key=value pairs separated by\n  `&`. The result is percent-encoded so it is always safe to use. Keys can be\n  strings or keywords. If values are collections then this results in multiple\n  entries for the same key. `nil` values are ignored. Values are stringified."],"^@",["^ ","^Q",null,"^2",["^ ","^3","lambdaisland/uri.cljc","^4",261,"^5",7,"^6",261,"^7",11,"^R",["^S",["^T",["^S",[["~$o"]]]]],"^V","Check if `o` is URI instance."],"^A","~$lambdaisland.uri/uri?","^3","lambdaisland/uri.cljc","^7",11,"^X",["^S",[["~$o"]]],"^Y",null,"^Z",["^S",[null,null]],"^5",1,"^[",false,"^4",261,"^10","^16","^6",261,"^12",1,"^13",true,"^R",["^S",["^T",["^S",[["~$o"]]]]],"^V","Check if `o` is URI instance."],"~$edn-readers",["^ ","^2",["^ ","^3","lambdaisland/uri.cljc","^4",288,"^5",3,"^6",288,"^7",14,"^V","A map that can be passed to clojure.edn/read, so tagged URI literals are\n     read back correctly."],"^A","~$lambdaisland.uri/edn-readers","^3","lambdaisland/uri.cljc","^7",14,"^5",1,"^4",284,"^6",288,"^1?","~$cljs.core/IMap","^V","A map that can be passed to clojure.edn/read, so tagged URI literals are\n     read back correctly."],"~$query-encode",["^ ","^Q",null,"^2",["^ ","^3","lambdaisland/uri.cljc","^4",187,"^5",7,"^6",187,"^7",19,"^R",["^S",["^T",["^S",[["~$s"]]]]],"^V","Percent encoding for query strings. Will percent-encode values that are\n  reserved in query strings only. Encodes spaces as +."],"^A","~$lambdaisland.uri/query-encode","^3","lambdaisland/uri.cljc","^7",19,"^X",["^S",[["~$s"]]],"^Y",null,"^Z",["^S",[null,null]],"^5",1,"^[",false,"^4",187,"^10","^1G","^6",187,"^12",1,"^13",true,"^R",["^S",["^T",["^S",[["~$s"]]]]],"^V","Percent encoding for query strings. Will percent-encode values that are\n  reserved in query strings only. Encodes spaces as +."],"~$->URI",["^ ","^Q",null,"^2",["^ ","^3","lambdaisland/uri.cljc","^7",15,"^5",12,"^18",true,"^19","~:positional","^4",31,"^6",31,"^R",["^S",["^T",["^S",[["^1P","^1Q","^1R","^1S","^1T","^1J","^1U","^1V"]]]]],"^V","Positional factory function for lambdaisland.uri/URI."],"^A","~$lambdaisland.uri/->URI","^3","lambdaisland/uri.cljc","^7",15,"^X",["^S",[["^1P","^1Q","^1R","^1S","^1T","^1J","^1U","^1V"]]],"^Y",null,"^Z",["^S",[null,null]],"^5",1,"^18",true,"^[",false,"^19","^2<","^4",31,"^10","^11","^6",31,"^12",8,"^13",true,"^R",["^S",["^T",["^S",[["^1P","^1Q","^1R","^1S","^1T","^1J","^1U","^1V"]]]]],"^V","Positional factory function for lambdaisland.uri/URI."],"~$authority-string",["^ ","^Q",null,"^2",["^ ","^3","lambdaisland/uri.cljc","^4",12,"^5",8,"^6",12,"^7",24,"^1I",true,"^R",["^S",["^T",["^S",[["^1Q","^1R","^1S","^1T"]]]]]],"^1I",true,"^A","~$lambdaisland.uri/authority-string","^3","lambdaisland/uri.cljc","^7",24,"^X",["^S",[["^1Q","^1R","^1S","^1T"]]],"^Y",null,"^Z",["^S",[null,null]],"^5",1,"^[",false,"^4",12,"^10",["^?",["^1L","^1M"]],"^6",12,"^12",4,"^13",true,"^R",["^S",["^T",["^S",[["^1Q","^1R","^1S","^1T"]]]]]],"~$uri-regex",["^ ","^A","~$lambdaisland.uri/uri-regex","^3","lambdaisland/uri.cljc","^4",7,"^5",1,"^6",7,"^7",15,"^2",["^ ","^3","lambdaisland/uri.cljc","^4",7,"^5",6,"^6",7,"^7",15],"^1?","^1G"],"~$decode-param-pair",["^ ","^Q",null,"^2",["^ ","^3","lambdaisland/uri.cljc","^4",132,"^5",8,"^6",132,"^7",25,"^1I",true,"^R",["^S",["^T",["^S",[["~$param"]]]]]],"^1I",true,"^A","~$lambdaisland.uri/decode-param-pair","^3","lambdaisland/uri.cljc","^7",25,"^X",["^S",[["^2C"]]],"^Y",null,"^Z",["^S",[null,null]],"^5",1,"^[",false,"^4",132,"^10","~$cljs.core/IVector","^6",132,"^12",1,"^13",true,"^R",["^S",["^T",["^S",[["^2C"]]]]]],"~$assoc-query",["^ ","^Q",null,"^2",["^ ","^3","lambdaisland/uri.cljc","^4",239,"^5",7,"^6",239,"^7",18,"^R",["^S",["^T",["^S",[["~$u","~$&",["^ ","~:as","~$kvs"]]]]]],"^V","Add additional query parameters to a URI. Takes a URI (or coercible to URI)\n  followed key value pairs.\n\n  (assoc-query \"http://example.com?id=1&name=John\" :name \"Jack\" :style \"goth\")\n  ;;=> #lambdaisland/uri \"http://example.com?id=1&name=Jack&style=goth\" ","^1C",["^ ","^[",true,"^1D",1,"^12",1,"^X",[["^S",["~$u",["^ ","^2G","^2H"]]]],"^R",["^S",[["~$u","~$&",["^ ","^2G","^2H"]]]],"^Z",["^S",[null]]]],"^A","~$lambdaisland.uri/assoc-query","^3","lambdaisland/uri.cljc","^7",18,"^1C",["^ ","^[",true,"^1D",1,"^12",1,"^X",[["^S",["~$u",["^ ","^2G","^2H"]]]],"^R",["^S",[["~$u","~$&",["^ ","^2G","^2H"]]]],"^Z",["^S",[null]]],"^X",[["^S",["~$u",["^ ","^2G","^2H"]]]],"^Y",null,"^1D",1,"^Z",["^S",[null]],"^5",1,"^[",true,"^1F",[["^ ","^1D",1,"^[",true,"^1?",["^?",["~$clj","^1G"]]]],"^4",239,"^10","^1G","^6",239,"^12",1,"^13",true,"^R",["^S",[["~$u","~$&",["^ ","^2G","^2H"]]]],"^V","Add additional query parameters to a URI. Takes a URI (or coercible to URI)\n  followed key value pairs.\n\n  (assoc-query \"http://example.com?id=1&name=John\" :name \"Jack\" :style \"goth\")\n  ;;=> #lambdaisland/uri \"http://example.com?id=1&name=Jack&style=goth\" "],"~$merge-paths",["^ ","^Q",null,"^2",["^ ","^3","lambdaisland/uri.cljc","^4",96,"^5",8,"^6",96,"^7",19,"^1I",true,"^R",["^S",["^T",["^S",[["~$a","~$b"]]]]]],"^1I",true,"^A","~$lambdaisland.uri/merge-paths","^3","lambdaisland/uri.cljc","^7",19,"^X",["^S",[["~$a","~$b"]]],"^Y",null,"^Z",["^S",[null,null]],"^5",1,"^[",false,"^4",96,"^10",["^?",[null,"^1L"]],"^6",96,"^12",2,"^13",true,"^R",["^S",["^T",["^S",[["~$a","~$b"]]]]]],"~$encode-param-pair",["^ ","^Q",null,"^2",["^ ","^3","lambdaisland/uri.cljc","^4",202,"^5",8,"^6",202,"^7",25,"^1I",true,"^R",["^S",["^T",["^S",[["~$k","~$v"]]]]]],"^1I",true,"^A","~$lambdaisland.uri/encode-param-pair","^3","lambdaisland/uri.cljc","^7",25,"^X",["^S",[["~$k","~$v"]]],"^Y",null,"^Z",["^S",[null,null]],"^5",1,"^[",false,"^4",202,"^10","^1L","^6",202,"^12",2,"^13",true,"^R",["^S",["^T",["^S",[["~$k","~$v"]]]]]],"~$join*",["^ ","^Q",null,"^2",["^ ","^3","lambdaisland/uri.cljc","^4",104,"^5",7,"^6",104,"^7",12,"^R",["^S",["^T",["^S",[["~$base","~$ref"]]]]],"^V","Join two URI records as per RFC 3986. Handles relative URIs."],"^A","~$lambdaisland.uri/join*","^3","lambdaisland/uri.cljc","^7",12,"^X",["^S",[["^2P","^2Q"]]],"^Y",null,"^Z",["^S",[null,null]],"^5",1,"^[",false,"^4",104,"^10",["^?",["^2J","^1G"]],"^6",104,"^12",2,"^13",true,"^R",["^S",["^T",["^S",[["^2P","^2Q"]]]]],"^V","Join two URI records as per RFC 3986. Handles relative URIs."],"~$authority-regex",["^ ","^A","~$lambdaisland.uri/authority-regex","^3","lambdaisland/uri.cljc","^4",9,"^5",1,"^6",9,"^7",21,"^2",["^ ","^3","lambdaisland/uri.cljc","^4",9,"^5",6,"^6",9,"^7",21],"^1?","^1G"],"~$match-uri",["^ ","^Q",null,"^2",["^ ","^3","lambdaisland/uri.cljc","^4",44,"^5",8,"^6",44,"^7",17,"^1I",true,"^R",["^S",["^T",["^S",[["^P"]]]]]],"^1I",true,"^A","~$lambdaisland.uri/match-uri","^3","lambdaisland/uri.cljc","^7",17,"^X",["^S",[["^P"]]],"^Y",null,"^Z",["^S",[null,null]],"^5",1,"^[",false,"^4",44,"^10","^2E","^6",44,"^12",1,"^13",true,"^R",["^S",["^T",["^S",[["^P"]]]]]],"~$match-authority",["^ ","^Q",null,"^2",["^ ","^3","lambdaisland/uri.cljc","^4",49,"^5",8,"^6",49,"^7",23,"^1I",true,"^R",["^S",["^T",["^S",[["~$authority"]]]]]],"^1I",true,"^A","~$lambdaisland.uri/match-authority","^3","lambdaisland/uri.cljc","^7",23,"^X",["^S",[["^2X"]]],"^Y",null,"^Z",["^S",[null,null]],"^5",1,"^[",false,"^4",49,"^10","^2E","^6",49,"^12",1,"^13",true,"^R",["^S",["^T",["^S",[["^2X"]]]]]],"~$URI",["^ ","~:num-fields",8,"~:protocols",["^?",["~$cljs.core/IRecord","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/IFn","~$cljs.core/ICollection","~$cljs.core/Object","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","^28","~$cljs.core/ILookup"]],"^A","^11","^3","lambdaisland/uri.cljc","^7",15,"~:type",true,"^5",12,"^18",true,"^4",31,"~:record",true,"^6",31,"^1?","^1@","~:skip-protocol-flag",["^?",["^31","^32","^33","^34","^35","^36","^38","^39","^3:","^3;","^3<","^3=","^3>","^3?","^28","^3@"]]],"~$edn-tag",["^ ","^A","~$lambdaisland.uri/edn-tag","^3","lambdaisland/uri.cljc","^4",269,"^5",1,"^6",269,"^7",13,"^2",["^ ","^3","lambdaisland/uri.cljc","^4",269,"^5",6,"^6",269,"^7",13],"^1?","~$cljs.core/Symbol"],"~$query-map",["^ ","^Q",null,"^2",["^ ","^3","lambdaisland/uri.cljc","^4",179,"^5",7,"^6",179,"^7",16,"^R",["^S",["^T",["^S",[["^P"],["~$u","~$opts"]]]]],"^V","Return the query section of a URI as a map. Will coerce its argument\n  with [[uri]]. Takes an options map, see [[query-string->map]] for options.","^1C",["^ ","^[",false,"^1D",2,"^12",2,"^X",[["^P"],["~$u","^3H"]],"^R",["^S",[["^P"],["~$u","^3H"]]],"^Z",["^S",[null,null]]]],"^A","~$lambdaisland.uri/query-map","^3","lambdaisland/uri.cljc","^7",16,"^1C",["^ ","^[",false,"^1D",2,"^12",2,"^X",[["^P"],["~$u","^3H"]],"^R",["^S",[["^P"],["~$u","^3H"]]],"^Z",["^S",[null,null]]],"^X",[["^P"],["~$u","^3H"]],"^Y",null,"^1D",2,"^Z",["^S",[null,null]],"^5",1,"^[",false,"^1F",[["^ ","^1D",1,"^[",false,"^1?","^1G"],["^ ","^1D",2,"^[",false,"^1?",["^?",[null,"^1G","^1M"]]]],"^4",179,"^6",179,"^12",2,"^13",true,"^R",["^S",[["^P"],["~$u","^3H"]]],"^V","Return the query section of a URI as a map. Will coerce its argument\n  with [[uri]]. Takes an options map, see [[query-string->map]] for options."],"~$parse",["^ ","^Q",null,"^2",["^ ","^3","lambdaisland/uri.cljc","^4",54,"^5",7,"^6",54,"^7",12,"^R",["^S",["^T",["^S",[["^P"]]]]],"^V","Parse a URI string into a lambadisland.uri.URI record."],"^A","~$lambdaisland.uri/parse","^3","lambdaisland/uri.cljc","^7",12,"^X",["^S",[["^P"]]],"^Y",null,"^Z",["^S",[null,null]],"^5",1,"^[",false,"^4",54,"^10","^11","^6",54,"^12",1,"^13",true,"^R",["^S",["^T",["^S",[["^P"]]]]],"^V","Parse a URI string into a lambadisland.uri.URI record."],"~$absolute-path?",["^ ","^Q",null,"^2",["^ ","^3","lambdaisland/uri.cljc","^4",77,"^5",8,"^6",77,"^7",22,"^1I",true,"^R",["^S",["^T",["^S",[["^1J"]]]]]],"^1I",true,"^A","~$lambdaisland.uri/absolute-path?","^3","lambdaisland/uri.cljc","^7",22,"^X",["^S",[["^1J"]]],"^Y",null,"^Z",["^S",[null,null]],"^5",1,"^[",false,"^4",77,"^10","^16","^6",77,"^12",1,"^13",true,"^R",["^S",["^T",["^S",[["^1J"]]]]]],"~$assoc-query*",["^ ","^Q",null,"^2",["^ ","^3","lambdaisland/uri.cljc","^4",232,"^5",7,"^6",232,"^7",19,"^R",["^S",["^T",["^S",[["~$u","~$m"]]]]],"^V","Add additional query parameters to a URI. Takes a URI (or coercible to URI) and\n  a map of query params."],"^A","~$lambdaisland.uri/assoc-query*","^3","lambdaisland/uri.cljc","^7",19,"^X",["^S",[["~$u","~$m"]]],"^Y",null,"^Z",["^S",[null,null]],"^5",1,"^[",false,"^4",232,"^10",["^?",["^2J","^1G"]],"^6",232,"^12",2,"^13",true,"^R",["^S",["^T",["^S",[["~$u","~$m"]]]]],"^V","Add additional query parameters to a URI. Takes a URI (or coercible to URI) and\n  a map of query params."]],"~:require-macros",["^ ","^<","^<"],"~:cljs.analyzer/constants",["^ ","^K",["^?",["~:path","~:keywordize?","^1U","^1Q","^21","^1P","~:else","^1J","~:password","~:fragment","^1R","~:port","^1V","~:host","^1T","^1S","~:query","~:multikeys","~$lambdaisland/uri","~:user","~:scheme"]],"~:order",["^41","^40","^3U","^3X","^3W","^3R","^3Y","^3V","^1P","^1Q","^1R","^1S","^1T","^1J","^1U","^1V","^3T","^3Z","^21","^3S","^3["]],"~:flags",["^ ","^L",["^?",[]]],"~:js-deps",[],"~:deps",["^J","^<","^F","^H"]]