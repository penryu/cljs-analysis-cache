["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ ","~$with-child-config","~$hicada.macros"],"~:excludes",["~#set",["~$compile"]],"~:name","~$hicada.compiler","~:imports",null,"~:requires",["^ ","^6","^6","~$norm","~$hicada.normalize","^?","^?","~$util","~$hicada.util","^A","^A"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$tag->el",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","^;","~:line",364,"~:column",7,"~:end-line",364,"~:end-column",14,"~:arglists",["~#list",["~$quote",["^N",[["~$x"]]]]],"~:doc","A :div is translated to \"div\" and symbol 'ReactRouter stays."],"^:","~$hicada.compiler/tag->el","^H","hicada/compiler.cljc","^L",14,"~:method-params",["^N",[["~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^N",[null,null]],"^J",1,"~:variadic?",false,"^I",364,"~:ret-tag",["^8",["~$cljs.core/Symbol","~$string",null]],"^K",364,"~:max-fixed-arity",1,"~:fn-var",true,"^M",["^N",["^O",["^N",[["~$x"]]]]],"^P","A :div is translated to \"div\" and symbol 'ReactRouter stays."],"~$emitter",["^ ","^F",null,"^G",["^ ","^H","^;","^I",411,"^J",7,"^K",411,"^L",14,"^M",["^N",["^O",["^N",[["~$content"]]]]]],"^:","~$hicada.compiler/emitter","^H","hicada/compiler.cljc","^L",14,"^R",["^N",[["^10"]]],"^S",null,"^T",["^N",[null,null]],"^J",1,"^U",false,"^I",411,"^V",["^8",["~$any","~$seq","~$clj",null]],"^K",411,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^10"]]]]]],"^9",["^ ","^F",null,"^G",["^ ","^H","^;","^I",416,"^J",7,"^K",416,"^L",14,"^M",["^N",["^O",["^N",[["^10"],["^10","~$opts"],["^10","^15","~$handlers"],["^10","^15","^16","~$env"]]]]],"^P","Arguments:\n  - content: The hiccup to compile\n  - opts\n   o :array-children? - for product build of React only or you'll enojoy a lot of warnings :)\n   o :create-element 'js/React.createElement - you can also use your own function here.\n   o :wrap-input? - if inputs should be wrapped. Try without!\n   o :rewrite-for? - rewrites simple (for [x xs] ...) into efficient reduce pushing into\n                          a JS array.\n   o :emit-fn - optinal: called with [type config-js child-or-children]\n   o :server-render? - defaults to false. Doesn't do any JS outputting. Still requires an :emit-fn!\n   o :camelcase-key-pred - defaults to (some-fn keyword? symbol?), ie. map keys that have\n                           string keys, are NOT by default converted from kebab-case to camelCase!\n   o :inline? false - NOT supported yet. Possibly in the future...\n   o :child-config - Called for every element with [config raw-element normalized-element]\n                     to get a new configuration for element's children\n   o :transform-fn - Called with [[tag attrs children *env*]] before emitting, to get\n                     transformed element as [tag attrs children]\n\n   React Native special recommended options:\n   o :no-string-tags? - Never output string tags (don't exits in RN)\n   o :default-ns - Any unprefixed component will get prefixed with this ns.\n   o :child-config - (fn [config raw-element normalized-element] -> config) change processing options as hicada goes down the tree\n  - handlers:\n   A map to handle special tags. See default-handlers in this namespace.\n  - env: The macro environment. Not used currently.","~:top-fn",["^ ","^U",false,"~:fixed-arity",4,"^Y",4,"^R",["^N",[["^10"],["^10","^15"],["^10","^15","^16"],["^10","^15","^16","^17"]]],"^M",["^N",[["^10"],["^10","^15"],["^10","^15","^16"],["^10","^15","^16","^17"]]],"^T",["^N",[null,null,null,null]]]],"^:","~$hicada.compiler/compile","^H","hicada/compiler.cljc","^L",14,"^18",["^ ","^U",false,"^19",4,"^Y",4,"^R",["^N",[["^10"],["^10","^15"],["^10","^15","^16"],["^10","^15","^16","^17"]]],"^M",["^N",[["^10"],["^10","^15"],["^10","^15","^16"],["^10","^15","^16","^17"]]],"^T",["^N",[null,null,null,null]]],"^R",["^N",[["^10"],["^10","^15"],["^10","^15","^16"],["^10","^15","^16","^17"]]],"^S",null,"^19",4,"^T",["^N",[null,null,null,null]],"^J",1,"^U",false,"~:methods",[["^ ","^19",1,"^U",false,"~:tag","^12"],["^ ","^19",2,"^U",false,"^1<","^12"],["^ ","^19",3,"^U",false,"^1<","^12"],["^ ","^19",4,"^U",false]],"^I",416,"^K",416,"^Y",4,"^Z",true,"^M",["^N",[["^10"],["^10","^15"],["^10","^15","^16"],["^10","^15","^16","^17"]]],"^P","Arguments:\n  - content: The hiccup to compile\n  - opts\n   o :array-children? - for product build of React only or you'll enojoy a lot of warnings :)\n   o :create-element 'js/React.createElement - you can also use your own function here.\n   o :wrap-input? - if inputs should be wrapped. Try without!\n   o :rewrite-for? - rewrites simple (for [x xs] ...) into efficient reduce pushing into\n                          a JS array.\n   o :emit-fn - optinal: called with [type config-js child-or-children]\n   o :server-render? - defaults to false. Doesn't do any JS outputting. Still requires an :emit-fn!\n   o :camelcase-key-pred - defaults to (some-fn keyword? symbol?), ie. map keys that have\n                           string keys, are NOT by default converted from kebab-case to camelCase!\n   o :inline? false - NOT supported yet. Possibly in the future...\n   o :child-config - Called for every element with [config raw-element normalized-element]\n                     to get a new configuration for element's children\n   o :transform-fn - Called with [[tag attrs children *env*]] before emitting, to get\n                     transformed element as [tag attrs children]\n\n   React Native special recommended options:\n   o :no-string-tags? - Never output string tags (don't exits in RN)\n   o :default-ns - Any unprefixed component will get prefixed with this ns.\n   o :child-config - (fn [config raw-element normalized-element] -> config) change processing options as hicada goes down the tree\n  - handlers:\n   A map to handle special tags. See default-handlers in this namespace.\n  - env: The macro environment. Not used currently."],"~$*config*",["^ ","^G",["^ ","^H","^;","^I",48,"^J",16,"^K",48,"^L",24,"~:dynamic",true],"^:","~$hicada.compiler/*config*","^H","hicada/compiler.cljc","^L",24,"^J",1,"^1>",true,"^I",48,"^K",48,"^1<","^12"],"~$compile-react",["^ ","^G",["^ ","^H","^;","^I",54,"^J",11,"^K",54,"^L",24,"^P","Compile a Clojure data structure into a React fn call."],"^:","~$hicada.compiler/compile-react","^H","hicada/compiler.cljc","^L",24,"^J",1,"^I",54,"^K",54,"^1<","~$cljs.core/MultiFn","^P","Compile a Clojure data structure into a React fn call."],"~$compile-config-kv",["^ ","^:","~$hicada.compiler/compile-config-kv","^H","hicada/compiler.cljc","^I",62,"^J",1,"^K",62,"^L",28,"^G",["^ ","^H","^;","^I",62,"^J",11,"^K",62,"^L",28],"^1<","^1B"],"~$compile-element",["^ ","^F",null,"^G",["^ ","^H","^;","^I",246,"^J",7,"^K",246,"^L",22,"^M",["^N",["^O",["^N",[[["~$tag","~$attrs","~$&","~$children","~:as","~$element"]]]]]],"^P","Returns an unevaluated form that will render the supplied vector as a HTML element."],"^:","~$hicada.compiler/compile-element","^H","hicada/compiler.cljc","^L",22,"^R",["^N",[["~$p__171"]]],"^S",null,"^T",["^N",[null,null]],"^J",1,"^U",false,"^I",246,"^V",["^8",["^12","^13","^14"]],"^K",246,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[[["^1F","^1G","~$&","^1H","^1I","^1J"]]]]]],"^P","Returns an unevaluated form that will render the supplied vector as a HTML element."],"~$default-config",["^ ","^:","~$hicada.compiler/default-config","^H","hicada/compiler.cljc","^I",34,"^J",1,"^K",34,"^L",20,"^G",["^ ","^H","^;","^I",34,"^J",6,"^K",34,"^L",20],"^1<","~$cljs.core/IMap"],"~$compile-react-element",["^ ","^F",null,"^G",["^ ","^H","^;","^I",240,"^J",7,"^K",240,"^L",28,"^M",["^N",["^O",["^N",[["^1J"]]]]],"^P","Render an element vector as a HTML element."],"^:","~$hicada.compiler/compile-react-element","^H","hicada/compiler.cljc","^L",28,"^R",["^N",[["^1J"]]],"^S",null,"^T",["^N",[null,null]],"^J",1,"^U",false,"^I",240,"^V","^12","^K",240,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^1J"]]]]],"^P","Render an element vector as a HTML element."],"~$default-handlers",["^ ","^:","~$hicada.compiler/default-handlers","^H","hicada/compiler.cljc","^I",21,"^J",1,"^K",21,"^L",22,"^G",["^ ","^H","^;","^I",21,"^J",6,"^K",21,"^L",22],"^1<","^1O"],"~$collapse-one",["^ ","^F",null,"^G",["^ ","^H","^;","^I",358,"^J",7,"^K",358,"^L",19,"^M",["^N",["^O",["^N",[["~$xs"]]]]],"^P","We can collapse children to a non-vector if there is only one."],"^:","~$hicada.compiler/collapse-one","^H","hicada/compiler.cljc","^L",19,"^R",["^N",[["^1U"]]],"^S",null,"^T",["^N",[null,null]],"^J",1,"^U",false,"^I",358,"^V",["^8",["^12","~$clj-nil",null]],"^K",358,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^1U"]]]]],"^P","We can collapse children to a non-vector if there is only one."],"~$to-js",["^ ","^G",["^ ","^H","^;","^I",322,"^J",11,"^K",322,"^L",16,"^P","Compiles to JS"],"^:","~$hicada.compiler/to-js","^H","hicada/compiler.cljc","^L",16,"^J",1,"^I",322,"^K",322,"^1<","^1B","^P","Compiles to JS"],"~$form-name",["^ ","^F",null,"^G",["^ ","^H","^;","^I",116,"^J",8,"^K",116,"^L",17,"~:private",true,"^M",["^N",["^O",["^N",[["~$form"]]]]],"^P","Get the name of the supplied form."],"^1[",true,"^:","~$hicada.compiler/form-name","^H","hicada/compiler.cljc","^L",17,"^R",["^N",[["^20"]]],"^S",null,"^T",["^N",[null,null]],"^J",1,"^U",false,"^I",116,"^V",["^8",["^X","^1W"]],"^K",116,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^20"]]]]],"^P","Get the name of the supplied form."],"~$*handlers*",["^ ","^G",["^ ","^H","^;","^I",49,"^J",16,"^K",49,"^L",26,"^1>",true],"^:","~$hicada.compiler/*handlers*","^H","hicada/compiler.cljc","^L",26,"^J",1,"^1>",true,"^I",49,"^K",49,"^1<","^12"],"~$literal?",["^ ","^F",null,"^G",["^ ","^H","^;","^I",229,"^J",8,"^K",229,"^L",16,"^1[",true,"^M",["^N",["^O",["^N",[["~$x"]]]]],"^P","True if x is a literal value that can be rendered as-is."],"^1[",true,"^:","~$hicada.compiler/literal?","^H","hicada/compiler.cljc","^L",16,"^R",["^N",[["~$x"]]],"^S",null,"^T",["^N",[null,null]],"^J",1,"^U",false,"^I",229,"^V","~$boolean","^K",229,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["~$x"]]]]],"^P","True if x is a literal value that can be rendered as-is."],"~$compile-form",["^ ","^G",["^ ","^H","^;","^I",124,"^J",11,"^K",124,"^L",23,"^P","Pre-compile certain standard forms, where possible."],"^:","~$hicada.compiler/compile-form","^H","hicada/compiler.cljc","^L",23,"^J",1,"^I",124,"^K",124,"^1<","^1B","^P","Pre-compile certain standard forms, where possible."],"~$unevaluated?",["^ ","^F",null,"^G",["^ ","^H","^;","^I",106,"^J",8,"^K",106,"^L",20,"^1[",true,"^M",["^N",["^O",["^N",[["~$expr"]]]]],"^P","True if the expression has not been evaluated.\n   - expr is a symbol? OR\n   - it's something like (foo bar)"],"^1[",true,"^:","~$hicada.compiler/unevaluated?","^H","hicada/compiler.cljc","^L",20,"^R",["^N",[["^2:"]]],"^S",null,"^T",["^N",[null,null]],"^J",1,"^U",false,"^I",106,"^V","^26","^K",106,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^2:"]]]]],"^P","True if the expression has not been evaluated.\n   - expr is a symbol? OR\n   - it's something like (foo bar)"],"~$emit-react",["^ ","^F",null,"^G",["^ ","^H","^;","^I",376,"^J",7,"^K",376,"^L",17,"^M",["^N",["^O",["^N",[["^1F","^1G","^1H"]]]]],"^P","Emits the final react js code"],"^:","~$hicada.compiler/emit-react","^H","hicada/compiler.cljc","^L",17,"^R",["^N",[["^1F","^1G","^1H"]]],"^S",null,"^T",["^N",[null,null]],"^J",1,"^U",false,"^I",376,"^V",["^8",["^12","~$cljs.core/List"]],"^K",376,"^Y",3,"^Z",true,"^M",["^N",["^O",["^N",[["^1F","^1G","^1H"]]]]],"^P","Emits the final react js code"],"~$compile-config",["^ ","^F",null,"^G",["^ ","^H","^;","^I",86,"^J",7,"^K",86,"^L",21,"^M",["^N",["^O",["^N",[["^1G"]]]]],"^P","Compile a HTML attribute map to react (class -> className), camelCases :style."],"^:","~$hicada.compiler/compile-config","^H","hicada/compiler.cljc","^L",21,"^R",["^N",[["^1G"]]],"^S",null,"^T",["^N",[null,null]],"^J",1,"^U",false,"^I",86,"^V",["^8",[null,"^12"]],"^K",86,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^1G"]]]]],"^P","Compile a HTML attribute map to react (class -> className), camelCases :style."],"~$*env*",["^ ","^G",["^ ","^H","^;","^I",50,"^J",16,"^K",50,"^L",21,"^1>",true],"^:","~$hicada.compiler/*env*","^H","hicada/compiler.cljc","^L",21,"^J",1,"^1>",true,"^I",50,"^K",50,"^1<","^12"],"~$to-js-map",["^ ","^F",null,"^G",["^ ","^H","^;","^I",332,"^J",8,"^K",332,"^L",17,"^1[",true,"^M",["^N",["^O",["^N",[["~$m"]]]]],"^P","Convert a map into a JavaScript object."],"^1[",true,"^:","~$hicada.compiler/to-js-map","^H","hicada/compiler.cljc","^L",17,"^R",["^N",[["~$m"]]],"^S",null,"^T",["^N",[null,null]],"^J",1,"^U",false,"^I",332,"^V",["^8",["^1W","^14","~$cljs.core/MetaFn"]],"^K",332,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["~$m"]]]]],"^P","Convert a map into a JavaScript object."],"~$compile-html",["^ ","^F",null,"^G",["^ ","^H","^;","^I",303,"^J",7,"^K",303,"^L",19,"^M",["^N",["^O",["^N",[["^10"]]]]],"^P","Pre-compile data structures"],"^:","~$hicada.compiler/compile-html","^H","hicada/compiler.cljc","^L",19,"^R",["^N",[["^10"]]],"^S",null,"^T",["^N",[null,null]],"^J",1,"^U",false,"^I",303,"^V",["^8",["^12","^13","^14",null]],"^K",303,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^10"]]]]],"^P","Pre-compile data structures"]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^6","^6"],"~:cljs.analyzer/constants",["^ ","~:seen",["^8",["~:default-ns","~:array-children?","~:child-config","~:children","~$cljs.core/when","~:rewrite-for?","~:*","~$object","~$cljs.core/into-array","~:no-string-tags?","~:key","~$js/React.Fragment","~:else","~:>","~:ref","~$cljs.core/reduce","~:default","~:server-render","~$cljs.core/when-not","~$hicada-for-reducer","~$do","~:wrap-input?","~$cljs.core/when-first","~:emit-fn","~$cljs.core/if-some","~:vector","~$letfn*","~$if","~:className","~:transform-fn","~:style","~$.push","~$cljs.core/let","~:inline?","~$cljs.core/condp","~$cljs.core/cond","~$let*","~$js*","~:camelcase-key-pred","~$cljs.core/when-let","~:keyword","~:class","~$cljs.core/for","~$cljs.core/fn","~:htmlFor","~:create-element","~$cljs.core/if-not","~$js/React.createElement","^1<","~:seq","^O","~$cljs.core/when-some","~:hierarchy","~$cljs.core/case","~:server-render?","~:map","~$cljs.core/if-let","~$cljs.core/array","~$out-arr__5__auto__"]],"~:order",["~:>","~:*","^2V","^2M","^2N","^2Q","^33","^35","^3;","^3?","^3D","^3K","^3R","^3M","^3P","^37","^3N","^2W","^2Z","^3G","^3<","^3:","^3J","^O","^32","^3U","^3>","^3B","^38","^2Y","^3I","^31","^3V","^3=","^2S","^3H","^39","^2P","^3O","^3E","^34","^30","^3L","^36","^3T","^3Q","^3@","^3A","^2[","^3S","^3F","^3C","^1<","^2R","^2T","^2L","^2O","^2U","^2X"]],"^P","\n  Hicada - Hiccup compiler aus dem Allgaeu\n\n  NOTE: The code for has been forked like this:\n  weavejester/hiccup -> r0man/sablono -> Hicada.\n\n  Note about :array-children? :\n  Go read the React.createElement() function, it's very short and easy to understand.\n  Do you see how the children are just copied from the arguments and then just put into\n  props.children? This is exactly what :array-children? avoids. It's completely safe to do.\n\n  Dev Note: Do NOT use any laziness here! Not when generating code! Or it won't pick up\n  the ^:dynamic config anymore!"]