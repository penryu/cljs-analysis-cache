["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$hicada.normalize","~:imports",null,"~:requires",["^ ","~$util","~$hicada.util","^:","^:"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$attributes",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","^6","~:line",56,"~:column",7,"~:end-line",56,"~:end-column",17,"~:arglists",["~#list",["~$quote",["^G",[["~$attrs"]]]]],"~:doc","Normalize the :class, :class-name and :className elements"],"^5","~$hicada.normalize/attributes","^A","hicada/normalize.cljc","^E",17,"~:method-params",["^G",[["^I"]]],"~:protocol-impl",null,"~:arglists-meta",["^G",[null,null]],"^C",1,"~:variadic?",false,"^B",56,"~:ret-tag",["^4",[null,"~$any"]],"^D",56,"~:max-fixed-arity",1,"~:fn-var",true,"^F",["^G",["^H",["^G",[["^I"]]]]],"^J","Normalize the :class, :class-name and :className elements"],"~$compact-map",["^ ","^?",null,"^@",["^ ","^A","^6","^B",8,"^C",7,"^D",8,"^E",18,"^F",["^G",["^H",["^G",[["~$m"]]]]],"^J","Removes all map entries where the value of the entry is empty."],"^5","~$hicada.normalize/compact-map","^A","hicada/normalize.cljc","^E",18,"^L",["^G",[["~$m"]]],"^M",null,"^N",["^G",[null,null]],"^C",1,"^O",false,"^B",8,"^P",["^4",[null,"^Q"]],"^D",8,"^R",1,"^S",true,"^F",["^G",["^H",["^G",[["~$m"]]]]],"^J","Removes all map entries where the value of the entry is empty."],"~$children",["^ ","^?",null,"^@",["^ ","^A","^6","^B",107,"^C",7,"^D",107,"^E",15,"^F",["^G",["^H",["^G",[["~$x"]]]]],"^J","Normalize the children of a HTML element."],"^5","~$hicada.normalize/children","^A","hicada/normalize.cljc","^E",15,"^L",["^G",[["~$x"]]],"^M",null,"^N",["^G",[null,null]],"^C",1,"^O",false,"^B",107,"^P","~$clj","^D",107,"^R",1,"^S",true,"^F",["^G",["^H",["^G",[["~$x"]]]]],"^J","Normalize the children of a HTML element."],"~$vec+stringify-class",["^ ","^?",null,"^@",["^ ","^A","^6","^B",25,"^C",7,"^D",25,"^E",26,"^F",["^G",["^H",["^G",[["~$klass"]]]]],"^J","Normalize `class` into a vector of classes (keywords will be stringified)."],"^5","~$hicada.normalize/vec+stringify-class","^A","hicada/normalize.cljc","^E",26,"^L",["^G",[["^Z"]]],"^M",null,"^N",["^G",[null,null]],"^C",1,"^O",false,"^B",25,"^P",["^4",["~$clj-nil","^X","~$cljs.core/IVector",null]],"^D",25,"^R",1,"^S",true,"^F",["^G",["^H",["^G",[["^Z"]]]]],"^J","Normalize `class` into a vector of classes (keywords will be stringified)."],"~$element",["^ ","^?",null,"^@",["^ ","^A","^6","^B",136,"^C",7,"^D",136,"^E",14,"^F",["^G",["^H",["^G",[[["~$tag","~$&","~$content"]]]]]],"^J","Given:\n  [:div.x.y#id (other)]\n  Returns:\n  [:div {:id \"id\"\n         :class [\"x\" \"y\"]}\n    (other)]"],"^5","~$hicada.normalize/element","^A","hicada/normalize.cljc","^E",14,"^L",["^G",[["~$p__38"]]],"^M",null,"^N",["^G",[null,null]],"^C",1,"^O",false,"^B",136,"^P","^11","^D",136,"^R",1,"^S",true,"^F",["^G",["^H",["^G",[[["^13","~$&","^14"]]]]]],"^J","Given:\n  [:div.x.y#id (other)]\n  Returns:\n  [:div {:id \"id\"\n         :class [\"x\" \"y\"]}\n    (other)]"],"~$match-tag",["^ ","^?",null,"^@",["^ ","^A","^6","^B",89,"^C",7,"^D",89,"^E",16,"^F",["^G",["^H",["^G",[["~$s"]]]]],"^J","Match `s` as a CSS tag and return a vector of tag name, CSS id and\n  CSS classes."],"^5","~$hicada.normalize/match-tag","^A","hicada/normalize.cljc","^E",16,"^L",["^G",[["~$s"]]],"^M",null,"^N",["^G",[null,null]],"^C",1,"^O",false,"^B",89,"^P","^11","^D",89,"^R",1,"^S",true,"^F",["^G",["^H",["^G",[["~$s"]]]]],"^J","Match `s` as a CSS tag and return a vector of tag name, CSS id and\n  CSS classes."],"~$strip-css",["^ ","^?",null,"^@",["^ ","^A","^6","^B",78,"^C",7,"^D",78,"^E",16,"^F",["^G",["^H",["^G",[["~$s"]]]]],"^J","Strip the # and . characters from the beginning of `s`."],"^5","~$hicada.normalize/strip-css","^A","hicada/normalize.cljc","^E",16,"^L",["^G",[["~$s"]]],"^M",null,"^N",["^G",[null,null]],"^C",1,"^O",false,"^B",78,"^P",["^4",["~$string",null,"^10"]],"^D",78,"^R",1,"^S",true,"^F",["^G",["^H",["^G",[["~$s"]]]]],"^J","Strip the # and . characters from the beginning of `s`."],"~$class-name",["^ ","^?",null,"^@",["^ ","^A","^6","^B",18,"^C",7,"^D",18,"^E",17,"^F",["^G",["^H",["^G",[["~$x"]]]]]],"^5","~$hicada.normalize/class-name","^A","hicada/normalize.cljc","^E",17,"^L",["^G",[["~$x"]]],"^M",null,"^N",["^G",[null,null]],"^C",1,"^O",false,"^B",18,"^P",["^4",["^1;",null]],"^D",18,"^R",1,"^S",true,"^F",["^G",["^H",["^G",[["~$x"]]]]]],"~$merge-with-class",["^ ","^?",null,"^@",["^ ","^A","^6","^B",67,"^C",7,"^D",67,"^E",23,"^F",["^G",["^H",["^G",[["~$m0","~$m1"]]]]],"^J","Like clojure.core/merge but concatenate :class entries."],"^5","~$hicada.normalize/merge-with-class","^A","hicada/normalize.cljc","^E",23,"^L",["^G",[["^1?","^1@"]]],"^M",null,"^N",["^G",[null,null]],"^C",1,"^O",false,"^B",67,"^P",["^4",["^X","^Q"]],"^D",67,"^R",2,"^S",true,"^F",["^G",["^H",["^G",[["^1?","^1@"]]]]],"^J","Like clojure.core/merge but concatenate :class entries."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ "],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:else","~:class","~:className","~:class-name","~:tag","~:default","~:content","~:id"]],"~:order",["^1F","^1G","^1H","^1I","^1J","^1K","^1L","^1M"]],"^J","\n  Mostly from sablono + hiccup project.\n  "]